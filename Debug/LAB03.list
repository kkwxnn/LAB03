
LAB03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048f0  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004a88  08004a88  00014a88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004aa8  08004aa8  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08004aa8  08004aa8  00014aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004ab0  08004ab0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ab0  08004ab0  00014ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ab4  08004ab4  00014ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08004ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000018  08004ad0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08004ad0  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d2f2  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b11  00000000  00000000  0002d33a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c10  00000000  00000000  0002ee50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b78  00000000  00000000  0002fa60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001575f  00000000  00000000  000305d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d60b  00000000  00000000  00045d37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a208  00000000  00000000  00053342  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dd54a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003420  00000000  00000000  000dd59c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08004a70 	.word	0x08004a70

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08004a70 	.word	0x08004a70

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1c:	f000 fd18 	bl	8001750 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d20:	f000 f8c2 	bl	8000ea8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d24:	f000 fa86 	bl	8001234 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d28:	f000 fa64 	bl	80011f4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d2c:	f000 fa38 	bl	80011a0 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d30:	f000 f924 	bl	8000f7c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d34:	f000 f9c4 	bl	80010c0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);
 8000d38:	484e      	ldr	r0, [pc, #312]	; (8000e74 <main+0x15c>)
 8000d3a:	f002 f883 	bl	8002e44 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, InputCaptureBuffer, IC_BUFFER_SIZE);
 8000d3e:	2314      	movs	r3, #20
 8000d40:	4a4d      	ldr	r2, [pc, #308]	; (8000e78 <main+0x160>)
 8000d42:	2100      	movs	r1, #0
 8000d44:	484b      	ldr	r0, [pc, #300]	; (8000e74 <main+0x15c>)
 8000d46:	f002 fa3b 	bl	80031c0 <HAL_TIM_IC_Start_DMA>

  HAL_TIM_Base_Start(&htim1);
 8000d4a:	484c      	ldr	r0, [pc, #304]	; (8000e7c <main+0x164>)
 8000d4c:	f002 f87a 	bl	8002e44 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d50:	2100      	movs	r1, #0
 8000d52:	484a      	ldr	r0, [pc, #296]	; (8000e7c <main+0x164>)
 8000d54:	f002 f92a 	bl	8002fac <HAL_TIM_PWM_Start>

  duty = MotorSetDuty*10;
 8000d58:	4b49      	ldr	r3, [pc, #292]	; (8000e80 <main+0x168>)
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	4613      	mov	r3, r2
 8000d5e:	009b      	lsls	r3, r3, #2
 8000d60:	4413      	add	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b47      	ldr	r3, [pc, #284]	; (8000e84 <main+0x16c>)
 8000d68:	601a      	str	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  static uint32_t timestamp = 0;
	  if (HAL_GetTick() >= timestamp)
 8000d6a:	f000 fd57 	bl	800181c <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	4b45      	ldr	r3, [pc, #276]	; (8000e88 <main+0x170>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	d31e      	bcc.n	8000db6 <main+0x9e>
	  {
		  timestamp = HAL_GetTick()+10;
 8000d78:	f000 fd50 	bl	800181c <HAL_GetTick>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	330a      	adds	r3, #10
 8000d80:	4a41      	ldr	r2, [pc, #260]	; (8000e88 <main+0x170>)
 8000d82:	6013      	str	r3, [r2, #0]
		  averageRisingedgePeriod = IC_Calc_Period();
 8000d84:	f000 fac4 	bl	8001310 <IC_Calc_Period>
 8000d88:	eef0 7a40 	vmov.f32	s15, s0
 8000d8c:	4b3f      	ldr	r3, [pc, #252]	; (8000e8c <main+0x174>)
 8000d8e:	edc3 7a00 	vstr	s15, [r3]
		  MotorReadRPM = 1/(averageRisingedgePeriod*768/60000000);
 8000d92:	4b3e      	ldr	r3, [pc, #248]	; (8000e8c <main+0x174>)
 8000d94:	edd3 7a00 	vldr	s15, [r3]
 8000d98:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 8000e90 <main+0x178>
 8000d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da0:	eddf 6a3c 	vldr	s13, [pc, #240]	; 8000e94 <main+0x17c>
 8000da4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000da8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8000dac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000db0:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <main+0x180>)
 8000db2:	edc3 7a00 	vstr	s15, [r3]
	  }

	  static uint32_t dutycycleupdate = 0;
	  if (HAL_GetTick() >= dutycycleupdate)
 8000db6:	f000 fd31 	bl	800181c <HAL_GetTick>
 8000dba:	4602      	mov	r2, r0
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <main+0x184>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	d350      	bcc.n	8000e66 <main+0x14e>
	  {
		  dutycycleupdate = HAL_GetTick() +10;
 8000dc4:	f000 fd2a 	bl	800181c <HAL_GetTick>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	330a      	adds	r3, #10
 8000dcc:	4a33      	ldr	r2, [pc, #204]	; (8000e9c <main+0x184>)
 8000dce:	6013      	str	r3, [r2, #0]
		  if (MotorControlEnable == 1)
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <main+0x188>)
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d139      	bne.n	8000e4c <main+0x134>
		  {
			  if (MotorReadRPM < MotorSetRPM)
 8000dd8:	4b2f      	ldr	r3, [pc, #188]	; (8000e98 <main+0x180>)
 8000dda:	ed93 7a00 	vldr	s14, [r3]
 8000dde:	4b31      	ldr	r3, [pc, #196]	; (8000ea4 <main+0x18c>)
 8000de0:	edd3 7a00 	vldr	s15, [r3]
 8000de4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000de8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dec:	d511      	bpl.n	8000e12 <main+0xfa>
			  {
				  if (duty < 50)
 8000dee:	4b25      	ldr	r3, [pc, #148]	; (8000e84 <main+0x16c>)
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	2b31      	cmp	r3, #49	; 0x31
 8000df4:	d803      	bhi.n	8000dfe <main+0xe6>
				  {
					  duty = 50;
 8000df6:	4b23      	ldr	r3, [pc, #140]	; (8000e84 <main+0x16c>)
 8000df8:	2232      	movs	r2, #50	; 0x32
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	e033      	b.n	8000e66 <main+0x14e>
				  }
				  else if (duty >= 50)
 8000dfe:	4b21      	ldr	r3, [pc, #132]	; (8000e84 <main+0x16c>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	2b31      	cmp	r3, #49	; 0x31
 8000e04:	d92f      	bls.n	8000e66 <main+0x14e>
				  {
					  duty += 1;
 8000e06:	4b1f      	ldr	r3, [pc, #124]	; (8000e84 <main+0x16c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <main+0x16c>)
 8000e0e:	6013      	str	r3, [r2, #0]
 8000e10:	e029      	b.n	8000e66 <main+0x14e>
				  }
			  }
			  else if (MotorReadRPM > MotorSetRPM)
 8000e12:	4b21      	ldr	r3, [pc, #132]	; (8000e98 <main+0x180>)
 8000e14:	ed93 7a00 	vldr	s14, [r3]
 8000e18:	4b22      	ldr	r3, [pc, #136]	; (8000ea4 <main+0x18c>)
 8000e1a:	edd3 7a00 	vldr	s15, [r3]
 8000e1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000e22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e26:	dd1e      	ble.n	8000e66 <main+0x14e>
			  {
				  if (duty < 50)
 8000e28:	4b16      	ldr	r3, [pc, #88]	; (8000e84 <main+0x16c>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	2b31      	cmp	r3, #49	; 0x31
 8000e2e:	d803      	bhi.n	8000e38 <main+0x120>
				  {
					  duty = 50;
 8000e30:	4b14      	ldr	r3, [pc, #80]	; (8000e84 <main+0x16c>)
 8000e32:	2232      	movs	r2, #50	; 0x32
 8000e34:	601a      	str	r2, [r3, #0]
 8000e36:	e016      	b.n	8000e66 <main+0x14e>
				  }
				  else if (duty >= 50)
 8000e38:	4b12      	ldr	r3, [pc, #72]	; (8000e84 <main+0x16c>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	2b31      	cmp	r3, #49	; 0x31
 8000e3e:	d912      	bls.n	8000e66 <main+0x14e>
				  {
					  duty -= 1;
 8000e40:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <main+0x16c>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	3b01      	subs	r3, #1
 8000e46:	4a0f      	ldr	r2, [pc, #60]	; (8000e84 <main+0x16c>)
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	e00c      	b.n	8000e66 <main+0x14e>
				  }
			  }
		  }
		  else if (MotorControlEnable == 0)
 8000e4c:	4b14      	ldr	r3, [pc, #80]	; (8000ea0 <main+0x188>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d108      	bne.n	8000e66 <main+0x14e>
		  {
			  duty = MotorSetDuty*10;
 8000e54:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <main+0x168>)
 8000e56:	681a      	ldr	r2, [r3, #0]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	009b      	lsls	r3, r3, #2
 8000e5c:	4413      	add	r3, r2
 8000e5e:	005b      	lsls	r3, r3, #1
 8000e60:	461a      	mov	r2, r3
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <main+0x16c>)
 8000e64:	601a      	str	r2, [r3, #0]
		  }
	  }

	  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <main+0x164>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <main+0x16c>)
 8000e6c:	6812      	ldr	r2, [r2, #0]
 8000e6e:	635a      	str	r2, [r3, #52]	; 0x34
  {
 8000e70:	e77b      	b.n	8000d6a <main+0x52>
 8000e72:	bf00      	nop
 8000e74:	2000007c 	.word	0x2000007c
 8000e78:	20000168 	.word	0x20000168
 8000e7c:	20000034 	.word	0x20000034
 8000e80:	20000000 	.word	0x20000000
 8000e84:	200001bc 	.word	0x200001bc
 8000e88:	200001c4 	.word	0x200001c4
 8000e8c:	200001b8 	.word	0x200001b8
 8000e90:	44400000 	.word	0x44400000
 8000e94:	4c64e1c0 	.word	0x4c64e1c0
 8000e98:	200001c0 	.word	0x200001c0
 8000e9c:	200001c8 	.word	0x200001c8
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000004 	.word	0x20000004

08000ea8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b094      	sub	sp, #80	; 0x50
 8000eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eae:	f107 0320 	add.w	r3, r7, #32
 8000eb2:	2230      	movs	r2, #48	; 0x30
 8000eb4:	2100      	movs	r1, #0
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fdd2 	bl	8004a60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ebc:	f107 030c 	add.w	r3, r7, #12
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ecc:	2300      	movs	r3, #0
 8000ece:	60bb      	str	r3, [r7, #8]
 8000ed0:	4b28      	ldr	r3, [pc, #160]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ed4:	4a27      	ldr	r2, [pc, #156]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eda:	6413      	str	r3, [r2, #64]	; 0x40
 8000edc:	4b25      	ldr	r3, [pc, #148]	; (8000f74 <SystemClock_Config+0xcc>)
 8000ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	60bb      	str	r3, [r7, #8]
 8000ee6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ee8:	2300      	movs	r3, #0
 8000eea:	607b      	str	r3, [r7, #4]
 8000eec:	4b22      	ldr	r3, [pc, #136]	; (8000f78 <SystemClock_Config+0xd0>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a21      	ldr	r2, [pc, #132]	; (8000f78 <SystemClock_Config+0xd0>)
 8000ef2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ef6:	6013      	str	r3, [r2, #0]
 8000ef8:	4b1f      	ldr	r3, [pc, #124]	; (8000f78 <SystemClock_Config+0xd0>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f00:	607b      	str	r3, [r7, #4]
 8000f02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f04:	2302      	movs	r3, #2
 8000f06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f08:	2301      	movs	r3, #1
 8000f0a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f0c:	2310      	movs	r3, #16
 8000f0e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f10:	2302      	movs	r3, #2
 8000f12:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f14:	2300      	movs	r3, #0
 8000f16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f18:	2310      	movs	r3, #16
 8000f1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f1c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f20:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f22:	2304      	movs	r3, #4
 8000f24:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f26:	2304      	movs	r3, #4
 8000f28:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f2a:	f107 0320 	add.w	r3, r7, #32
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f001 faa0 	bl	8002474 <HAL_RCC_OscConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f3a:	f000 fa59 	bl	80013f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f3e:	230f      	movs	r3, #15
 8000f40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f42:	2302      	movs	r3, #2
 8000f44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f46:	2300      	movs	r3, #0
 8000f48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f54:	f107 030c 	add.w	r3, r7, #12
 8000f58:	2102      	movs	r1, #2
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fd02 	bl	8002964 <HAL_RCC_ClockConfig>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f66:	f000 fa43 	bl	80013f0 <Error_Handler>
  }
}
 8000f6a:	bf00      	nop
 8000f6c:	3750      	adds	r7, #80	; 0x50
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40007000 	.word	0x40007000

08000f7c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b096      	sub	sp, #88	; 0x58
 8000f80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f82:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]
 8000f8c:	609a      	str	r2, [r3, #8]
 8000f8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f90:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	601a      	str	r2, [r3, #0]
 8000fa2:	605a      	str	r2, [r3, #4]
 8000fa4:	609a      	str	r2, [r3, #8]
 8000fa6:	60da      	str	r2, [r3, #12]
 8000fa8:	611a      	str	r2, [r3, #16]
 8000faa:	615a      	str	r2, [r3, #20]
 8000fac:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fae:	1d3b      	adds	r3, r7, #4
 8000fb0:	2220      	movs	r2, #32
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f003 fd53 	bl	8004a60 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fba:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fbc:	4a3f      	ldr	r2, [pc, #252]	; (80010bc <MX_TIM1_Init+0x140>)
 8000fbe:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8000fc0:	4b3d      	ldr	r3, [pc, #244]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fc2:	2253      	movs	r2, #83	; 0x53
 8000fc4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fc6:	4b3c      	ldr	r3, [pc, #240]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000fcc:	4b3a      	ldr	r3, [pc, #232]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fce:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fd2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fd4:	4b38      	ldr	r3, [pc, #224]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fda:	4b37      	ldr	r3, [pc, #220]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe0:	4b35      	ldr	r3, [pc, #212]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fe6:	4834      	ldr	r0, [pc, #208]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8000fe8:	f001 fedc 	bl	8002da4 <HAL_TIM_Base_Init>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000ff2:	f000 f9fd 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ff6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ffc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001000:	4619      	mov	r1, r3
 8001002:	482d      	ldr	r0, [pc, #180]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8001004:	f002 fbd6 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800100e:	f000 f9ef 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001012:	4829      	ldr	r0, [pc, #164]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8001014:	f001 ff70 	bl	8002ef8 <HAL_TIM_PWM_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800101e:	f000 f9e7 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001026:	2300      	movs	r3, #0
 8001028:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800102e:	4619      	mov	r1, r3
 8001030:	4821      	ldr	r0, [pc, #132]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8001032:	f003 f96f 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001036:	4603      	mov	r3, r0
 8001038:	2b00      	cmp	r3, #0
 800103a:	d001      	beq.n	8001040 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800103c:	f000 f9d8 	bl	80013f0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001040:	2360      	movs	r3, #96	; 0x60
 8001042:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 500;
 8001044:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001048:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104a:	2300      	movs	r3, #0
 800104c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001052:	2300      	movs	r3, #0
 8001054:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001056:	2300      	movs	r3, #0
 8001058:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800105e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001062:	2200      	movs	r2, #0
 8001064:	4619      	mov	r1, r3
 8001066:	4814      	ldr	r0, [pc, #80]	; (80010b8 <MX_TIM1_Init+0x13c>)
 8001068:	f002 fae2 	bl	8003630 <HAL_TIM_PWM_ConfigChannel>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001072:	f000 f9bd 	bl	80013f0 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001076:	2300      	movs	r3, #0
 8001078:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800107e:	2300      	movs	r3, #0
 8001080:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800108a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	4807      	ldr	r0, [pc, #28]	; (80010b8 <MX_TIM1_Init+0x13c>)
 800109a:	f003 f9a9 	bl	80043f0 <HAL_TIMEx_ConfigBreakDeadTime>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 80010a4:	f000 f9a4 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010a8:	4803      	ldr	r0, [pc, #12]	; (80010b8 <MX_TIM1_Init+0x13c>)
 80010aa:	f000 fa5f 	bl	800156c <HAL_TIM_MspPostInit>

}
 80010ae:	bf00      	nop
 80010b0:	3758      	adds	r7, #88	; 0x58
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	20000034 	.word	0x20000034
 80010bc:	40010000 	.word	0x40010000

080010c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80010ea:	4b2c      	ldr	r3, [pc, #176]	; (800119c <MX_TIM2_Init+0xdc>)
 80010ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80010f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80010f2:	4b2a      	ldr	r3, [pc, #168]	; (800119c <MX_TIM2_Init+0xdc>)
 80010f4:	2253      	movs	r2, #83	; 0x53
 80010f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <MX_TIM2_Init+0xdc>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80010fe:	4b27      	ldr	r3, [pc, #156]	; (800119c <MX_TIM2_Init+0xdc>)
 8001100:	f04f 32ff 	mov.w	r2, #4294967295
 8001104:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001106:	4b25      	ldr	r3, [pc, #148]	; (800119c <MX_TIM2_Init+0xdc>)
 8001108:	2200      	movs	r2, #0
 800110a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <MX_TIM2_Init+0xdc>)
 800110e:	2200      	movs	r2, #0
 8001110:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001112:	4822      	ldr	r0, [pc, #136]	; (800119c <MX_TIM2_Init+0xdc>)
 8001114:	f001 fe46 	bl	8002da4 <HAL_TIM_Base_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800111e:	f000 f967 	bl	80013f0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001122:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001126:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001128:	f107 0318 	add.w	r3, r7, #24
 800112c:	4619      	mov	r1, r3
 800112e:	481b      	ldr	r0, [pc, #108]	; (800119c <MX_TIM2_Init+0xdc>)
 8001130:	f002 fb40 	bl	80037b4 <HAL_TIM_ConfigClockSource>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800113a:	f000 f959 	bl	80013f0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800113e:	4817      	ldr	r0, [pc, #92]	; (800119c <MX_TIM2_Init+0xdc>)
 8001140:	f001 ffe4 	bl	800310c <HAL_TIM_IC_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800114a:	f000 f951 	bl	80013f0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001156:	f107 0310 	add.w	r3, r7, #16
 800115a:	4619      	mov	r1, r3
 800115c:	480f      	ldr	r0, [pc, #60]	; (800119c <MX_TIM2_Init+0xdc>)
 800115e:	f003 f8d9 	bl	8004314 <HAL_TIMEx_MasterConfigSynchronization>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8001168:	f000 f942 	bl	80013f0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800116c:	2300      	movs	r3, #0
 800116e:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001170:	2301      	movs	r3, #1
 8001172:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001178:	2300      	movs	r3, #0
 800117a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800117c:	463b      	mov	r3, r7
 800117e:	2200      	movs	r2, #0
 8001180:	4619      	mov	r1, r3
 8001182:	4806      	ldr	r0, [pc, #24]	; (800119c <MX_TIM2_Init+0xdc>)
 8001184:	f002 f9b8 	bl	80034f8 <HAL_TIM_IC_ConfigChannel>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800118e:	f000 f92f 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001192:	bf00      	nop
 8001194:	3728      	adds	r7, #40	; 0x28
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	2000007c 	.word	0x2000007c

080011a0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011a4:	4b11      	ldr	r3, [pc, #68]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <MX_USART2_UART_Init+0x50>)
 80011a8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011aa:	4b10      	ldr	r3, [pc, #64]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011b0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011b2:	4b0e      	ldr	r3, [pc, #56]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011b8:	4b0c      	ldr	r3, [pc, #48]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011be:	4b0b      	ldr	r3, [pc, #44]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011c4:	4b09      	ldr	r3, [pc, #36]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011c6:	220c      	movs	r2, #12
 80011c8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ca:	4b08      	ldr	r3, [pc, #32]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011d0:	4b06      	ldr	r3, [pc, #24]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_USART2_UART_Init+0x4c>)
 80011d8:	f003 f95c 	bl	8004494 <HAL_UART_Init>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011e2:	f000 f905 	bl	80013f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011e6:	bf00      	nop
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	20000124 	.word	0x20000124
 80011f0:	40004400 	.word	0x40004400

080011f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b082      	sub	sp, #8
 80011f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
 80011fe:	4b0c      	ldr	r3, [pc, #48]	; (8001230 <MX_DMA_Init+0x3c>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a0b      	ldr	r2, [pc, #44]	; (8001230 <MX_DMA_Init+0x3c>)
 8001204:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b09      	ldr	r3, [pc, #36]	; (8001230 <MX_DMA_Init+0x3c>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001216:	2200      	movs	r2, #0
 8001218:	2100      	movs	r1, #0
 800121a:	2010      	movs	r0, #16
 800121c:	f000 fbe5 	bl	80019ea <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001220:	2010      	movs	r0, #16
 8001222:	f000 fbfe 	bl	8001a22 <HAL_NVIC_EnableIRQ>

}
 8001226:	bf00      	nop
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	40023800 	.word	0x40023800

08001234 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b08a      	sub	sp, #40	; 0x28
 8001238:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800123a:	f107 0314 	add.w	r3, r7, #20
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a2c      	ldr	r2, [pc, #176]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001254:	f043 0304 	orr.w	r3, r3, #4
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <MX_GPIO_Init+0xd0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0304 	and.w	r3, r3, #4
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b26      	ldr	r3, [pc, #152]	; (8001304 <MX_GPIO_Init+0xd0>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a25      	ldr	r2, [pc, #148]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b23      	ldr	r3, [pc, #140]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001282:	2300      	movs	r3, #0
 8001284:	60bb      	str	r3, [r7, #8]
 8001286:	4b1f      	ldr	r3, [pc, #124]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128a:	4a1e      	ldr	r2, [pc, #120]	; (8001304 <MX_GPIO_Init+0xd0>)
 800128c:	f043 0301 	orr.w	r3, r3, #1
 8001290:	6313      	str	r3, [r2, #48]	; 0x30
 8001292:	4b1c      	ldr	r3, [pc, #112]	; (8001304 <MX_GPIO_Init+0xd0>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001296:	f003 0301 	and.w	r3, r3, #1
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	4b18      	ldr	r3, [pc, #96]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a17      	ldr	r2, [pc, #92]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012a8:	f043 0302 	orr.w	r3, r3, #2
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b15      	ldr	r3, [pc, #84]	; (8001304 <MX_GPIO_Init+0xd0>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	607b      	str	r3, [r7, #4]
 80012b8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012ba:	2200      	movs	r2, #0
 80012bc:	2120      	movs	r1, #32
 80012be:	4812      	ldr	r0, [pc, #72]	; (8001308 <MX_GPIO_Init+0xd4>)
 80012c0:	f001 f8be 	bl	8002440 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80012ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012d4:	f107 0314 	add.w	r3, r7, #20
 80012d8:	4619      	mov	r1, r3
 80012da:	480c      	ldr	r0, [pc, #48]	; (800130c <MX_GPIO_Init+0xd8>)
 80012dc:	f000 ff2c 	bl	8002138 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80012e0:	2320      	movs	r3, #32
 80012e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e4:	2301      	movs	r3, #1
 80012e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ec:	2300      	movs	r3, #0
 80012ee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0314 	add.w	r3, r7, #20
 80012f4:	4619      	mov	r1, r3
 80012f6:	4804      	ldr	r0, [pc, #16]	; (8001308 <MX_GPIO_Init+0xd4>)
 80012f8:	f000 ff1e 	bl	8002138 <HAL_GPIO_Init>

}
 80012fc:	bf00      	nop
 80012fe:	3728      	adds	r7, #40	; 0x28
 8001300:	46bd      	mov	sp, r7
 8001302:	bd80      	pop	{r7, pc}
 8001304:	40023800 	.word	0x40023800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020800 	.word	0x40020800

08001310 <IC_Calc_Period>:

/* USER CODE BEGIN 4 */
float IC_Calc_Period()
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b086      	sub	sp, #24
 8001314:	af00      	add	r7, sp, #0
	uint32_t currentDMAPointer = IC_BUFFER_SIZE - __HAL_DMA_GET_COUNTER((htim2.hdma[1]));
 8001316:	4b32      	ldr	r3, [pc, #200]	; (80013e0 <IC_Calc_Period+0xd0>)
 8001318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	f1c3 0314 	rsb	r3, r3, #20
 8001322:	60fb      	str	r3, [r7, #12]
	uint32_t lastValidDMAPointer = (currentDMAPointer-1 + IC_BUFFER_SIZE) % IC_BUFFER_SIZE;
 8001324:	68fb      	ldr	r3, [r7, #12]
 8001326:	f103 0213 	add.w	r2, r3, #19
 800132a:	4b2e      	ldr	r3, [pc, #184]	; (80013e4 <IC_Calc_Period+0xd4>)
 800132c:	fba3 1302 	umull	r1, r3, r3, r2
 8001330:	0919      	lsrs	r1, r3, #4
 8001332:	460b      	mov	r3, r1
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	440b      	add	r3, r1
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	60bb      	str	r3, [r7, #8]
	uint32_t i = (lastValidDMAPointer + IC_BUFFER_SIZE - 5) % IC_BUFFER_SIZE;
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	f103 020f 	add.w	r2, r3, #15
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <IC_Calc_Period+0xd4>)
 8001346:	fba3 1302 	umull	r1, r3, r3, r2
 800134a:	0919      	lsrs	r1, r3, #4
 800134c:	460b      	mov	r3, r1
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	440b      	add	r3, r1
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	617b      	str	r3, [r7, #20]
	int32_t sumdiff = 0;
 8001358:	2300      	movs	r3, #0
 800135a:	613b      	str	r3, [r7, #16]
	while (i != lastValidDMAPointer)
 800135c:	e025      	b.n	80013aa <IC_Calc_Period+0x9a>
	{
		uint32_t firstCapture = InputCaptureBuffer[i];
 800135e:	4a22      	ldr	r2, [pc, #136]	; (80013e8 <IC_Calc_Period+0xd8>)
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001366:	607b      	str	r3, [r7, #4]
		uint32_t NextCapture = InputCaptureBuffer[(i+1)%IC_BUFFER_SIZE];
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	1c59      	adds	r1, r3, #1
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <IC_Calc_Period+0xd4>)
 800136e:	fba3 2301 	umull	r2, r3, r3, r1
 8001372:	091a      	lsrs	r2, r3, #4
 8001374:	4613      	mov	r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	4413      	add	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	1aca      	subs	r2, r1, r3
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <IC_Calc_Period+0xd8>)
 8001380:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001384:	603b      	str	r3, [r7, #0]
		sumdiff += NextCapture - firstCapture;
 8001386:	683a      	ldr	r2, [r7, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	1ad2      	subs	r2, r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	4413      	add	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
		i = (i+1) % IC_BUFFER_SIZE;
 8001392:	697b      	ldr	r3, [r7, #20]
 8001394:	1c5a      	adds	r2, r3, #1
 8001396:	4b13      	ldr	r3, [pc, #76]	; (80013e4 <IC_Calc_Period+0xd4>)
 8001398:	fba3 1302 	umull	r1, r3, r3, r2
 800139c:	0919      	lsrs	r1, r3, #4
 800139e:	460b      	mov	r3, r1
 80013a0:	009b      	lsls	r3, r3, #2
 80013a2:	440b      	add	r3, r1
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	617b      	str	r3, [r7, #20]
	while (i != lastValidDMAPointer)
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d1d5      	bne.n	800135e <IC_Calc_Period+0x4e>
	}
	return sumdiff / 5.0;
 80013b2:	6938      	ldr	r0, [r7, #16]
 80013b4:	f7ff f862 	bl	800047c <__aeabi_i2d>
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <IC_Calc_Period+0xdc>)
 80013be:	f7ff f9f1 	bl	80007a4 <__aeabi_ddiv>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	f7ff fad3 	bl	8000974 <__aeabi_d2f>
 80013ce:	4603      	mov	r3, r0
 80013d0:	ee07 3a90 	vmov	s15, r3
}
 80013d4:	eeb0 0a67 	vmov.f32	s0, s15
 80013d8:	3718      	adds	r7, #24
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	2000007c 	.word	0x2000007c
 80013e4:	cccccccd 	.word	0xcccccccd
 80013e8:	20000168 	.word	0x20000168
 80013ec:	40140000 	.word	0x40140000

080013f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013f4:	b672      	cpsid	i
}
 80013f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <Error_Handler+0x8>
	...

080013fc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001402:	2300      	movs	r3, #0
 8001404:	607b      	str	r3, [r7, #4]
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_MspInit+0x4c>)
 8001408:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800140a:	4a0f      	ldr	r2, [pc, #60]	; (8001448 <HAL_MspInit+0x4c>)
 800140c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001410:	6453      	str	r3, [r2, #68]	; 0x44
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800141a:	607b      	str	r3, [r7, #4]
 800141c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b09      	ldr	r3, [pc, #36]	; (8001448 <HAL_MspInit+0x4c>)
 8001424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001426:	4a08      	ldr	r2, [pc, #32]	; (8001448 <HAL_MspInit+0x4c>)
 8001428:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800142c:	6413      	str	r3, [r2, #64]	; 0x40
 800142e:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800143a:	2007      	movs	r0, #7
 800143c:	f000 faca 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001440:	bf00      	nop
 8001442:	3708      	adds	r7, #8
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40023800 	.word	0x40023800

0800144c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08a      	sub	sp, #40	; 0x28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001454:	f107 0314 	add.w	r3, r7, #20
 8001458:	2200      	movs	r2, #0
 800145a:	601a      	str	r2, [r3, #0]
 800145c:	605a      	str	r2, [r3, #4]
 800145e:	609a      	str	r2, [r3, #8]
 8001460:	60da      	str	r2, [r3, #12]
 8001462:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a3b      	ldr	r2, [pc, #236]	; (8001558 <HAL_TIM_Base_MspInit+0x10c>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d10e      	bne.n	800148c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b3a      	ldr	r3, [pc, #232]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 8001474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001476:	4a39      	ldr	r2, [pc, #228]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 8001478:	f043 0301 	orr.w	r3, r3, #1
 800147c:	6453      	str	r3, [r2, #68]	; 0x44
 800147e:	4b37      	ldr	r3, [pc, #220]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 8001480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001482:	f003 0301 	and.w	r3, r3, #1
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800148a:	e061      	b.n	8001550 <HAL_TIM_Base_MspInit+0x104>
  else if(htim_base->Instance==TIM2)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001494:	d15c      	bne.n	8001550 <HAL_TIM_Base_MspInit+0x104>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
 800149a:	4b30      	ldr	r3, [pc, #192]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 800149c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149e:	4a2f      	ldr	r2, [pc, #188]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 80014a0:	f043 0301 	orr.w	r3, r3, #1
 80014a4:	6413      	str	r3, [r2, #64]	; 0x40
 80014a6:	4b2d      	ldr	r3, [pc, #180]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 80014a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014aa:	f003 0301 	and.w	r3, r3, #1
 80014ae:	60fb      	str	r3, [r7, #12]
 80014b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b2:	2300      	movs	r3, #0
 80014b4:	60bb      	str	r3, [r7, #8]
 80014b6:	4b29      	ldr	r3, [pc, #164]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	4a28      	ldr	r2, [pc, #160]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 80014bc:	f043 0301 	orr.w	r3, r3, #1
 80014c0:	6313      	str	r3, [r2, #48]	; 0x30
 80014c2:	4b26      	ldr	r3, [pc, #152]	; (800155c <HAL_TIM_Base_MspInit+0x110>)
 80014c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c6:	f003 0301 	and.w	r3, r3, #1
 80014ca:	60bb      	str	r3, [r7, #8]
 80014cc:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ce:	2301      	movs	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014da:	2300      	movs	r3, #0
 80014dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014de:	2301      	movs	r3, #1
 80014e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e2:	f107 0314 	add.w	r3, r7, #20
 80014e6:	4619      	mov	r1, r3
 80014e8:	481d      	ldr	r0, [pc, #116]	; (8001560 <HAL_TIM_Base_MspInit+0x114>)
 80014ea:	f000 fe25 	bl	8002138 <HAL_GPIO_Init>
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 80014ee:	4b1d      	ldr	r3, [pc, #116]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 80014f0:	4a1d      	ldr	r2, [pc, #116]	; (8001568 <HAL_TIM_Base_MspInit+0x11c>)
 80014f2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 80014f4:	4b1b      	ldr	r3, [pc, #108]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 80014f6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80014fa:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80014fc:	4b19      	ldr	r3, [pc, #100]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001502:	4b18      	ldr	r3, [pc, #96]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001504:	2200      	movs	r2, #0
 8001506:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001508:	4b16      	ldr	r3, [pc, #88]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 800150a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800150e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001516:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 800151a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800151e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 8001520:	4b10      	ldr	r3, [pc, #64]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001522:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001526:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001528:	4b0e      	ldr	r3, [pc, #56]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 800152a:	2200      	movs	r2, #0
 800152c:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800152e:	4b0d      	ldr	r3, [pc, #52]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001530:	2200      	movs	r2, #0
 8001532:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001534:	480b      	ldr	r0, [pc, #44]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001536:	f000 fa8f 	bl	8001a58 <HAL_DMA_Init>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <HAL_TIM_Base_MspInit+0xf8>
      Error_Handler();
 8001540:	f7ff ff56 	bl	80013f0 <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 8001548:	625a      	str	r2, [r3, #36]	; 0x24
 800154a:	4a06      	ldr	r2, [pc, #24]	; (8001564 <HAL_TIM_Base_MspInit+0x118>)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6393      	str	r3, [r2, #56]	; 0x38
}
 8001550:	bf00      	nop
 8001552:	3728      	adds	r7, #40	; 0x28
 8001554:	46bd      	mov	sp, r7
 8001556:	bd80      	pop	{r7, pc}
 8001558:	40010000 	.word	0x40010000
 800155c:	40023800 	.word	0x40023800
 8001560:	40020000 	.word	0x40020000
 8001564:	200000c4 	.word	0x200000c4
 8001568:	40026088 	.word	0x40026088

0800156c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001574:	f107 030c 	add.w	r3, r7, #12
 8001578:	2200      	movs	r2, #0
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	605a      	str	r2, [r3, #4]
 800157e:	609a      	str	r2, [r3, #8]
 8001580:	60da      	str	r2, [r3, #12]
 8001582:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	4a12      	ldr	r2, [pc, #72]	; (80015d4 <HAL_TIM_MspPostInit+0x68>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d11e      	bne.n	80015cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b11      	ldr	r3, [pc, #68]	; (80015d8 <HAL_TIM_MspPostInit+0x6c>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_TIM_MspPostInit+0x6c>)
 8001598:	f043 0301 	orr.w	r3, r3, #1
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b0e      	ldr	r3, [pc, #56]	; (80015d8 <HAL_TIM_MspPostInit+0x6c>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80015aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80015ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b0:	2302      	movs	r3, #2
 80015b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b4:	2300      	movs	r3, #0
 80015b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b8:	2300      	movs	r3, #0
 80015ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015bc:	2301      	movs	r3, #1
 80015be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c0:	f107 030c 	add.w	r3, r7, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4805      	ldr	r0, [pc, #20]	; (80015dc <HAL_TIM_MspPostInit+0x70>)
 80015c8:	f000 fdb6 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80015cc:	bf00      	nop
 80015ce:	3720      	adds	r7, #32
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	40010000 	.word	0x40010000
 80015d8:	40023800 	.word	0x40023800
 80015dc:	40020000 	.word	0x40020000

080015e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b08a      	sub	sp, #40	; 0x28
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]
 80015f4:	60da      	str	r2, [r3, #12]
 80015f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a19      	ldr	r2, [pc, #100]	; (8001664 <HAL_UART_MspInit+0x84>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12b      	bne.n	800165a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	613b      	str	r3, [r7, #16]
 8001606:	4b18      	ldr	r3, [pc, #96]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	4a17      	ldr	r2, [pc, #92]	; (8001668 <HAL_UART_MspInit+0x88>)
 800160c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001610:	6413      	str	r3, [r2, #64]	; 0x40
 8001612:	4b15      	ldr	r3, [pc, #84]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	613b      	str	r3, [r7, #16]
 800161c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60fb      	str	r3, [r7, #12]
 8001622:	4b11      	ldr	r3, [pc, #68]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a10      	ldr	r2, [pc, #64]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b0e      	ldr	r3, [pc, #56]	; (8001668 <HAL_UART_MspInit+0x88>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800163a:	230c      	movs	r3, #12
 800163c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163e:	2302      	movs	r3, #2
 8001640:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001646:	2303      	movs	r3, #3
 8001648:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800164a:	2307      	movs	r3, #7
 800164c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800164e:	f107 0314 	add.w	r3, r7, #20
 8001652:	4619      	mov	r1, r3
 8001654:	4805      	ldr	r0, [pc, #20]	; (800166c <HAL_UART_MspInit+0x8c>)
 8001656:	f000 fd6f 	bl	8002138 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800165a:	bf00      	nop
 800165c:	3728      	adds	r7, #40	; 0x28
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	40004400 	.word	0x40004400
 8001668:	40023800 	.word	0x40023800
 800166c:	40020000 	.word	0x40020000

08001670 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001674:	e7fe      	b.n	8001674 <NMI_Handler+0x4>

08001676 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800167a:	e7fe      	b.n	800167a <HardFault_Handler+0x4>

0800167c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001680:	e7fe      	b.n	8001680 <MemManage_Handler+0x4>

08001682 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001682:	b480      	push	{r7}
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001686:	e7fe      	b.n	8001686 <BusFault_Handler+0x4>

08001688 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800168c:	e7fe      	b.n	800168c <UsageFault_Handler+0x4>

0800168e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800168e:	b480      	push	{r7}
 8001690:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001692:	bf00      	nop
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr

0800169c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a0:	bf00      	nop
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr

080016aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016aa:	b480      	push	{r7}
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016ae:	bf00      	nop
 80016b0:	46bd      	mov	sp, r7
 80016b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b6:	4770      	bx	lr

080016b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016bc:	f000 f89a 	bl	80017f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <DMA1_Stream5_IRQHandler+0x10>)
 80016ca:	f000 facb 	bl	8001c64 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	200000c4 	.word	0x200000c4

080016d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	; (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80016fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001734 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001700:	480d      	ldr	r0, [pc, #52]	; (8001738 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001702:	490e      	ldr	r1, [pc, #56]	; (800173c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001704:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001706:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001708:	e002      	b.n	8001710 <LoopCopyDataInit>

0800170a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800170a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800170c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800170e:	3304      	adds	r3, #4

08001710 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001710:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001712:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001714:	d3f9      	bcc.n	800170a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001718:	4c0b      	ldr	r4, [pc, #44]	; (8001748 <LoopFillZerobss+0x26>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800171c:	e001      	b.n	8001722 <LoopFillZerobss>

0800171e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800171e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001720:	3204      	adds	r2, #4

08001722 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001722:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001724:	d3fb      	bcc.n	800171e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001726:	f7ff ffd7 	bl	80016d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800172a:	f003 f975 	bl	8004a18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800172e:	f7ff faf3 	bl	8000d18 <main>
  bx  lr    
 8001732:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001734:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001738:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800173c:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 8001740:	08004ab8 	.word	0x08004ab8
  ldr r2, =_sbss
 8001744:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001748:	200001d0 	.word	0x200001d0

0800174c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800174c:	e7fe      	b.n	800174c <ADC_IRQHandler>
	...

08001750 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001754:	4b0e      	ldr	r3, [pc, #56]	; (8001790 <HAL_Init+0x40>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a0d      	ldr	r2, [pc, #52]	; (8001790 <HAL_Init+0x40>)
 800175a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800175e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001760:	4b0b      	ldr	r3, [pc, #44]	; (8001790 <HAL_Init+0x40>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a0a      	ldr	r2, [pc, #40]	; (8001790 <HAL_Init+0x40>)
 8001766:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800176a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_Init+0x40>)
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a07      	ldr	r2, [pc, #28]	; (8001790 <HAL_Init+0x40>)
 8001772:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001776:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001778:	2003      	movs	r0, #3
 800177a:	f000 f92b 	bl	80019d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800177e:	2000      	movs	r0, #0
 8001780:	f000 f808 	bl	8001794 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001784:	f7ff fe3a 	bl	80013fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001788:	2300      	movs	r3, #0
}
 800178a:	4618      	mov	r0, r3
 800178c:	bd80      	pop	{r7, pc}
 800178e:	bf00      	nop
 8001790:	40023c00 	.word	0x40023c00

08001794 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b082      	sub	sp, #8
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <HAL_InitTick+0x54>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b12      	ldr	r3, [pc, #72]	; (80017ec <HAL_InitTick+0x58>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b2:	4618      	mov	r0, r3
 80017b4:	f000 f943 	bl	8001a3e <HAL_SYSTICK_Config>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017be:	2301      	movs	r3, #1
 80017c0:	e00e      	b.n	80017e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2b0f      	cmp	r3, #15
 80017c6:	d80a      	bhi.n	80017de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c8:	2200      	movs	r2, #0
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	f04f 30ff 	mov.w	r0, #4294967295
 80017d0:	f000 f90b 	bl	80019ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017d4:	4a06      	ldr	r2, [pc, #24]	; (80017f0 <HAL_InitTick+0x5c>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017da:	2300      	movs	r3, #0
 80017dc:	e000      	b.n	80017e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3708      	adds	r7, #8
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	20000014 	.word	0x20000014
 80017f0:	20000010 	.word	0x20000010

080017f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017f4:	b480      	push	{r7}
 80017f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017f8:	4b06      	ldr	r3, [pc, #24]	; (8001814 <HAL_IncTick+0x20>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	461a      	mov	r2, r3
 80017fe:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_IncTick+0x24>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4413      	add	r3, r2
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <HAL_IncTick+0x24>)
 8001806:	6013      	str	r3, [r2, #0]
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr
 8001812:	bf00      	nop
 8001814:	20000014 	.word	0x20000014
 8001818:	200001cc 	.word	0x200001cc

0800181c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return uwTick;
 8001820:	4b03      	ldr	r3, [pc, #12]	; (8001830 <HAL_GetTick+0x14>)
 8001822:	681b      	ldr	r3, [r3, #0]
}
 8001824:	4618      	mov	r0, r3
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	200001cc 	.word	0x200001cc

08001834 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001834:	b480      	push	{r7}
 8001836:	b085      	sub	sp, #20
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001844:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001846:	68db      	ldr	r3, [r3, #12]
 8001848:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800184a:	68ba      	ldr	r2, [r7, #8]
 800184c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001850:	4013      	ands	r3, r2
 8001852:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001858:	68bb      	ldr	r3, [r7, #8]
 800185a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800185c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001860:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001864:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <__NVIC_SetPriorityGrouping+0x44>)
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	60d3      	str	r3, [r2, #12]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <__NVIC_GetPriorityGrouping+0x18>)
 8001882:	68db      	ldr	r3, [r3, #12]
 8001884:	0a1b      	lsrs	r3, r3, #8
 8001886:	f003 0307 	and.w	r3, r3, #7
}
 800188a:	4618      	mov	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	e000ed00 	.word	0xe000ed00

08001898 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	db0b      	blt.n	80018c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018aa:	79fb      	ldrb	r3, [r7, #7]
 80018ac:	f003 021f 	and.w	r2, r3, #31
 80018b0:	4907      	ldr	r1, [pc, #28]	; (80018d0 <__NVIC_EnableIRQ+0x38>)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	095b      	lsrs	r3, r3, #5
 80018b8:	2001      	movs	r0, #1
 80018ba:	fa00 f202 	lsl.w	r2, r0, r2
 80018be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018c2:	bf00      	nop
 80018c4:	370c      	adds	r7, #12
 80018c6:	46bd      	mov	sp, r7
 80018c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	e000e100 	.word	0xe000e100

080018d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	6039      	str	r1, [r7, #0]
 80018de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	db0a      	blt.n	80018fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	b2da      	uxtb	r2, r3
 80018ec:	490c      	ldr	r1, [pc, #48]	; (8001920 <__NVIC_SetPriority+0x4c>)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	0112      	lsls	r2, r2, #4
 80018f4:	b2d2      	uxtb	r2, r2
 80018f6:	440b      	add	r3, r1
 80018f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018fc:	e00a      	b.n	8001914 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	b2da      	uxtb	r2, r3
 8001902:	4908      	ldr	r1, [pc, #32]	; (8001924 <__NVIC_SetPriority+0x50>)
 8001904:	79fb      	ldrb	r3, [r7, #7]
 8001906:	f003 030f 	and.w	r3, r3, #15
 800190a:	3b04      	subs	r3, #4
 800190c:	0112      	lsls	r2, r2, #4
 800190e:	b2d2      	uxtb	r2, r2
 8001910:	440b      	add	r3, r1
 8001912:	761a      	strb	r2, [r3, #24]
}
 8001914:	bf00      	nop
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr
 8001920:	e000e100 	.word	0xe000e100
 8001924:	e000ed00 	.word	0xe000ed00

08001928 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001928:	b480      	push	{r7}
 800192a:	b089      	sub	sp, #36	; 0x24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800193c:	69fb      	ldr	r3, [r7, #28]
 800193e:	f1c3 0307 	rsb	r3, r3, #7
 8001942:	2b04      	cmp	r3, #4
 8001944:	bf28      	it	cs
 8001946:	2304      	movcs	r3, #4
 8001948:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	3304      	adds	r3, #4
 800194e:	2b06      	cmp	r3, #6
 8001950:	d902      	bls.n	8001958 <NVIC_EncodePriority+0x30>
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	3b03      	subs	r3, #3
 8001956:	e000      	b.n	800195a <NVIC_EncodePriority+0x32>
 8001958:	2300      	movs	r3, #0
 800195a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	68bb      	ldr	r3, [r7, #8]
 800196a:	401a      	ands	r2, r3
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001970:	f04f 31ff 	mov.w	r1, #4294967295
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	fa01 f303 	lsl.w	r3, r1, r3
 800197a:	43d9      	mvns	r1, r3
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001980:	4313      	orrs	r3, r2
         );
}
 8001982:	4618      	mov	r0, r3
 8001984:	3724      	adds	r7, #36	; 0x24
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
	...

08001990 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b082      	sub	sp, #8
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019a0:	d301      	bcc.n	80019a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019a2:	2301      	movs	r3, #1
 80019a4:	e00f      	b.n	80019c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a6:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <SysTick_Config+0x40>)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ae:	210f      	movs	r1, #15
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	f7ff ff8e 	bl	80018d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <SysTick_Config+0x40>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019be:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <SysTick_Config+0x40>)
 80019c0:	2207      	movs	r2, #7
 80019c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c4:	2300      	movs	r3, #0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	e000e010 	.word	0xe000e010

080019d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019dc:	6878      	ldr	r0, [r7, #4]
 80019de:	f7ff ff29 	bl	8001834 <__NVIC_SetPriorityGrouping>
}
 80019e2:	bf00      	nop
 80019e4:	3708      	adds	r7, #8
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b086      	sub	sp, #24
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	60b9      	str	r1, [r7, #8]
 80019f4:	607a      	str	r2, [r7, #4]
 80019f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019fc:	f7ff ff3e 	bl	800187c <__NVIC_GetPriorityGrouping>
 8001a00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	6978      	ldr	r0, [r7, #20]
 8001a08:	f7ff ff8e 	bl	8001928 <NVIC_EncodePriority>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a12:	4611      	mov	r1, r2
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff5d 	bl	80018d4 <__NVIC_SetPriority>
}
 8001a1a:	bf00      	nop
 8001a1c:	3718      	adds	r7, #24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	4603      	mov	r3, r0
 8001a2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f7ff ff31 	bl	8001898 <__NVIC_EnableIRQ>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f7ff ffa2 	bl	8001990 <SysTick_Config>
 8001a4c:	4603      	mov	r3, r0
}
 8001a4e:	4618      	mov	r0, r3
 8001a50:	3708      	adds	r7, #8
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
	...

08001a58 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a64:	f7ff feda 	bl	800181c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d101      	bne.n	8001a74 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a70:	2301      	movs	r3, #1
 8001a72:	e099      	b.n	8001ba8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2202      	movs	r2, #2
 8001a78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2200      	movs	r2, #0
 8001a80:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	681a      	ldr	r2, [r3, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f022 0201 	bic.w	r2, r2, #1
 8001a92:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a94:	e00f      	b.n	8001ab6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a96:	f7ff fec1 	bl	800181c <HAL_GetTick>
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	2b05      	cmp	r3, #5
 8001aa2:	d908      	bls.n	8001ab6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2203      	movs	r2, #3
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001ab2:	2303      	movs	r3, #3
 8001ab4:	e078      	b.n	8001ba8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d1e8      	bne.n	8001a96 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001acc:	697a      	ldr	r2, [r7, #20]
 8001ace:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_DMA_Init+0x158>)
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685a      	ldr	r2, [r3, #4]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001aee:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	699b      	ldr	r3, [r3, #24]
 8001af4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001afa:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6a1b      	ldr	r3, [r3, #32]
 8001b00:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	4313      	orrs	r3, r2
 8001b06:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	2b04      	cmp	r3, #4
 8001b0e:	d107      	bne.n	8001b20 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	697a      	ldr	r2, [r7, #20]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	697a      	ldr	r2, [r7, #20]
 8001b26:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	695b      	ldr	r3, [r3, #20]
 8001b2e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	f023 0307 	bic.w	r3, r3, #7
 8001b36:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3c:	697a      	ldr	r2, [r7, #20]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b46:	2b04      	cmp	r3, #4
 8001b48:	d117      	bne.n	8001b7a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d00e      	beq.n	8001b7a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 fa6f 	bl	8002040 <DMA_CheckFifoParam>
 8001b62:	4603      	mov	r3, r0
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d008      	beq.n	8001b7a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2240      	movs	r2, #64	; 0x40
 8001b6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2201      	movs	r2, #1
 8001b72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b76:	2301      	movs	r3, #1
 8001b78:	e016      	b.n	8001ba8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	697a      	ldr	r2, [r7, #20]
 8001b80:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f000 fa26 	bl	8001fd4 <DMA_CalcBaseAndBitshift>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b90:	223f      	movs	r2, #63	; 0x3f
 8001b92:	409a      	lsls	r2, r3
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ba6:	2300      	movs	r3, #0
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3718      	adds	r7, #24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	f010803f 	.word	0xf010803f

08001bb4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b086      	sub	sp, #24
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
 8001bc0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bca:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d101      	bne.n	8001bda <HAL_DMA_Start_IT+0x26>
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	e040      	b.n	8001c5c <HAL_DMA_Start_IT+0xa8>
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2201      	movs	r2, #1
 8001bde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d12f      	bne.n	8001c4e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2202      	movs	r2, #2
 8001bf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f9b8 	bl	8001f78 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c0c:	223f      	movs	r2, #63	; 0x3f
 8001c0e:	409a      	lsls	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681a      	ldr	r2, [r3, #0]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f042 0216 	orr.w	r2, r2, #22
 8001c22:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d007      	beq.n	8001c3c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0208 	orr.w	r2, r2, #8
 8001c3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	681a      	ldr	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f042 0201 	orr.w	r2, r2, #1
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	e005      	b.n	8001c5a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c56:	2302      	movs	r3, #2
 8001c58:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3718      	adds	r7, #24
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b086      	sub	sp, #24
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001c70:	4b8e      	ldr	r3, [pc, #568]	; (8001eac <HAL_DMA_IRQHandler+0x248>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a8e      	ldr	r2, [pc, #568]	; (8001eb0 <HAL_DMA_IRQHandler+0x24c>)
 8001c76:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7a:	0a9b      	lsrs	r3, r3, #10
 8001c7c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c82:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c8e:	2208      	movs	r2, #8
 8001c90:	409a      	lsls	r2, r3
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4013      	ands	r3, r2
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d01a      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d013      	beq.n	8001cd0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	681a      	ldr	r2, [r3, #0]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0204 	bic.w	r2, r2, #4
 8001cb6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cbc:	2208      	movs	r2, #8
 8001cbe:	409a      	lsls	r2, r3
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	409a      	lsls	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	4013      	ands	r3, r2
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d012      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	695b      	ldr	r3, [r3, #20]
 8001ce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d00b      	beq.n	8001d06 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	409a      	lsls	r2, r3
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0202 	orr.w	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0a:	2204      	movs	r2, #4
 8001d0c:	409a      	lsls	r2, r3
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	4013      	ands	r3, r2
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d012      	beq.n	8001d3c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 0302 	and.w	r3, r3, #2
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d00b      	beq.n	8001d3c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d28:	2204      	movs	r2, #4
 8001d2a:	409a      	lsls	r2, r3
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d40:	2210      	movs	r2, #16
 8001d42:	409a      	lsls	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4013      	ands	r3, r2
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d043      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d03c      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5e:	2210      	movs	r2, #16
 8001d60:	409a      	lsls	r2, r3
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d018      	beq.n	8001da6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d108      	bne.n	8001d94 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d024      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	4798      	blx	r3
 8001d92:	e01f      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d01b      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da0:	6878      	ldr	r0, [r7, #4]
 8001da2:	4798      	blx	r3
 8001da4:	e016      	b.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d107      	bne.n	8001dc4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f022 0208 	bic.w	r2, r2, #8
 8001dc2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d003      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dd0:	6878      	ldr	r0, [r7, #4]
 8001dd2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2220      	movs	r2, #32
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	f000 808f 	beq.w	8001f04 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	f000 8087 	beq.w	8001f04 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfa:	2220      	movs	r2, #32
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	2b05      	cmp	r3, #5
 8001e0c:	d136      	bne.n	8001e7c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0216 	bic.w	r2, r2, #22
 8001e1c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	695a      	ldr	r2, [r3, #20]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e2c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d103      	bne.n	8001e3e <HAL_DMA_IRQHandler+0x1da>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d007      	beq.n	8001e4e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f022 0208 	bic.w	r2, r2, #8
 8001e4c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	223f      	movs	r2, #63	; 0x3f
 8001e54:	409a      	lsls	r2, r3
 8001e56:	693b      	ldr	r3, [r7, #16]
 8001e58:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2201      	movs	r2, #1
 8001e5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	2200      	movs	r2, #0
 8001e66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d07e      	beq.n	8001f70 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	4798      	blx	r3
        }
        return;
 8001e7a:	e079      	b.n	8001f70 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d01d      	beq.n	8001ec6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d10d      	bne.n	8001eb4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d031      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	4798      	blx	r3
 8001ea8:	e02c      	b.n	8001f04 <HAL_DMA_IRQHandler+0x2a0>
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d023      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec0:	6878      	ldr	r0, [r7, #4]
 8001ec2:	4798      	blx	r3
 8001ec4:	e01e      	b.n	8001f04 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d10f      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0210 	bic.w	r2, r2, #16
 8001ee2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d003      	beq.n	8001f04 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d032      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f10:	f003 0301 	and.w	r3, r3, #1
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d022      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2205      	movs	r2, #5
 8001f1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f022 0201 	bic.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	3301      	adds	r3, #1
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d307      	bcc.n	8001f4c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f003 0301 	and.w	r3, r3, #1
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f2      	bne.n	8001f30 <HAL_DMA_IRQHandler+0x2cc>
 8001f4a:	e000      	b.n	8001f4e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f4c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d005      	beq.n	8001f72 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	4798      	blx	r3
 8001f6e:	e000      	b.n	8001f72 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f70:	bf00      	nop
    }
  }
}
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	607a      	str	r2, [r7, #4]
 8001f84:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f94:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	683a      	ldr	r2, [r7, #0]
 8001f9c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	2b40      	cmp	r3, #64	; 0x40
 8001fa4:	d108      	bne.n	8001fb8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	68ba      	ldr	r2, [r7, #8]
 8001fb4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001fb6:	e007      	b.n	8001fc8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	687a      	ldr	r2, [r7, #4]
 8001fc6:	60da      	str	r2, [r3, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr

08001fd4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b085      	sub	sp, #20
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	b2db      	uxtb	r3, r3
 8001fe2:	3b10      	subs	r3, #16
 8001fe4:	4a14      	ldr	r2, [pc, #80]	; (8002038 <DMA_CalcBaseAndBitshift+0x64>)
 8001fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fea:	091b      	lsrs	r3, r3, #4
 8001fec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fee:	4a13      	ldr	r2, [pc, #76]	; (800203c <DMA_CalcBaseAndBitshift+0x68>)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	781b      	ldrb	r3, [r3, #0]
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d909      	bls.n	8002016 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800200a:	f023 0303 	bic.w	r3, r3, #3
 800200e:	1d1a      	adds	r2, r3, #4
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	659a      	str	r2, [r3, #88]	; 0x58
 8002014:	e007      	b.n	8002026 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800201e:	f023 0303 	bic.w	r3, r3, #3
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800202a:	4618      	mov	r0, r3
 800202c:	3714      	adds	r7, #20
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	aaaaaaab 	.word	0xaaaaaaab
 800203c:	08004aa0 	.word	0x08004aa0

08002040 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002040:	b480      	push	{r7}
 8002042:	b085      	sub	sp, #20
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002050:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	699b      	ldr	r3, [r3, #24]
 8002056:	2b00      	cmp	r3, #0
 8002058:	d11f      	bne.n	800209a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	2b03      	cmp	r3, #3
 800205e:	d856      	bhi.n	800210e <DMA_CheckFifoParam+0xce>
 8002060:	a201      	add	r2, pc, #4	; (adr r2, 8002068 <DMA_CheckFifoParam+0x28>)
 8002062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002066:	bf00      	nop
 8002068:	08002079 	.word	0x08002079
 800206c:	0800208b 	.word	0x0800208b
 8002070:	08002079 	.word	0x08002079
 8002074:	0800210f 	.word	0x0800210f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d046      	beq.n	8002112 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002084:	2301      	movs	r3, #1
 8002086:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002088:	e043      	b.n	8002112 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800208e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002092:	d140      	bne.n	8002116 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002094:	2301      	movs	r3, #1
 8002096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002098:	e03d      	b.n	8002116 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020a2:	d121      	bne.n	80020e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	2b03      	cmp	r3, #3
 80020a8:	d837      	bhi.n	800211a <DMA_CheckFifoParam+0xda>
 80020aa:	a201      	add	r2, pc, #4	; (adr r2, 80020b0 <DMA_CheckFifoParam+0x70>)
 80020ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020b0:	080020c1 	.word	0x080020c1
 80020b4:	080020c7 	.word	0x080020c7
 80020b8:	080020c1 	.word	0x080020c1
 80020bc:	080020d9 	.word	0x080020d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]
      break;
 80020c4:	e030      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d025      	beq.n	800211e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d6:	e022      	b.n	800211e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020e0:	d11f      	bne.n	8002122 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020e6:	e01c      	b.n	8002122 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d903      	bls.n	80020f6 <DMA_CheckFifoParam+0xb6>
 80020ee:	68bb      	ldr	r3, [r7, #8]
 80020f0:	2b03      	cmp	r3, #3
 80020f2:	d003      	beq.n	80020fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020f4:	e018      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	73fb      	strb	r3, [r7, #15]
      break;
 80020fa:	e015      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002100:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00e      	beq.n	8002126 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	73fb      	strb	r3, [r7, #15]
      break;
 800210c:	e00b      	b.n	8002126 <DMA_CheckFifoParam+0xe6>
      break;
 800210e:	bf00      	nop
 8002110:	e00a      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e008      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;
 8002116:	bf00      	nop
 8002118:	e006      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
 800211c:	e004      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;
 800211e:	bf00      	nop
 8002120:	e002      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;   
 8002122:	bf00      	nop
 8002124:	e000      	b.n	8002128 <DMA_CheckFifoParam+0xe8>
      break;
 8002126:	bf00      	nop
    }
  } 
  
  return status; 
 8002128:	7bfb      	ldrb	r3, [r7, #15]
}
 800212a:	4618      	mov	r0, r3
 800212c:	3714      	adds	r7, #20
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop

08002138 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002142:	2300      	movs	r3, #0
 8002144:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800214a:	2300      	movs	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
 8002152:	e159      	b.n	8002408 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002154:	2201      	movs	r2, #1
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	697a      	ldr	r2, [r7, #20]
 8002164:	4013      	ands	r3, r2
 8002166:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002168:	693a      	ldr	r2, [r7, #16]
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	429a      	cmp	r2, r3
 800216e:	f040 8148 	bne.w	8002402 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 0303 	and.w	r3, r3, #3
 800217a:	2b01      	cmp	r3, #1
 800217c:	d005      	beq.n	800218a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002186:	2b02      	cmp	r3, #2
 8002188:	d130      	bne.n	80021ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	005b      	lsls	r3, r3, #1
 8002194:	2203      	movs	r2, #3
 8002196:	fa02 f303 	lsl.w	r3, r2, r3
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	68da      	ldr	r2, [r3, #12]
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	69ba      	ldr	r2, [r7, #24]
 80021b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021c0:	2201      	movs	r2, #1
 80021c2:	69fb      	ldr	r3, [r7, #28]
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	69ba      	ldr	r2, [r7, #24]
 80021cc:	4013      	ands	r3, r2
 80021ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	091b      	lsrs	r3, r3, #4
 80021d6:	f003 0201 	and.w	r2, r3, #1
 80021da:	69fb      	ldr	r3, [r7, #28]
 80021dc:	fa02 f303 	lsl.w	r3, r2, r3
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	4313      	orrs	r3, r2
 80021e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f003 0303 	and.w	r3, r3, #3
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	d017      	beq.n	8002228 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021fe:	69fb      	ldr	r3, [r7, #28]
 8002200:	005b      	lsls	r3, r3, #1
 8002202:	2203      	movs	r2, #3
 8002204:	fa02 f303 	lsl.w	r3, r2, r3
 8002208:	43db      	mvns	r3, r3
 800220a:	69ba      	ldr	r2, [r7, #24]
 800220c:	4013      	ands	r3, r2
 800220e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	69fb      	ldr	r3, [r7, #28]
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f003 0303 	and.w	r3, r3, #3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d123      	bne.n	800227c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	08da      	lsrs	r2, r3, #3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	3208      	adds	r2, #8
 800223c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002240:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002242:	69fb      	ldr	r3, [r7, #28]
 8002244:	f003 0307 	and.w	r3, r3, #7
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	220f      	movs	r2, #15
 800224c:	fa02 f303 	lsl.w	r3, r2, r3
 8002250:	43db      	mvns	r3, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4013      	ands	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	691a      	ldr	r2, [r3, #16]
 800225c:	69fb      	ldr	r3, [r7, #28]
 800225e:	f003 0307 	and.w	r3, r3, #7
 8002262:	009b      	lsls	r3, r3, #2
 8002264:	fa02 f303 	lsl.w	r3, r2, r3
 8002268:	69ba      	ldr	r2, [r7, #24]
 800226a:	4313      	orrs	r3, r2
 800226c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	08da      	lsrs	r2, r3, #3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	3208      	adds	r2, #8
 8002276:	69b9      	ldr	r1, [r7, #24]
 8002278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	005b      	lsls	r3, r3, #1
 8002286:	2203      	movs	r2, #3
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	69ba      	ldr	r2, [r7, #24]
 8002290:	4013      	ands	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 0203 	and.w	r2, r3, #3
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	005b      	lsls	r3, r3, #1
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4313      	orrs	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 80a2 	beq.w	8002402 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022be:	2300      	movs	r3, #0
 80022c0:	60fb      	str	r3, [r7, #12]
 80022c2:	4b57      	ldr	r3, [pc, #348]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	4a56      	ldr	r2, [pc, #344]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022cc:	6453      	str	r3, [r2, #68]	; 0x44
 80022ce:	4b54      	ldr	r3, [pc, #336]	; (8002420 <HAL_GPIO_Init+0x2e8>)
 80022d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022d6:	60fb      	str	r3, [r7, #12]
 80022d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022da:	4a52      	ldr	r2, [pc, #328]	; (8002424 <HAL_GPIO_Init+0x2ec>)
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	089b      	lsrs	r3, r3, #2
 80022e0:	3302      	adds	r3, #2
 80022e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80022e8:	69fb      	ldr	r3, [r7, #28]
 80022ea:	f003 0303 	and.w	r3, r3, #3
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	220f      	movs	r2, #15
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	43db      	mvns	r3, r3
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	4013      	ands	r3, r2
 80022fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a49      	ldr	r2, [pc, #292]	; (8002428 <HAL_GPIO_Init+0x2f0>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d019      	beq.n	800233a <HAL_GPIO_Init+0x202>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4a48      	ldr	r2, [pc, #288]	; (800242c <HAL_GPIO_Init+0x2f4>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d013      	beq.n	8002336 <HAL_GPIO_Init+0x1fe>
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4a47      	ldr	r2, [pc, #284]	; (8002430 <HAL_GPIO_Init+0x2f8>)
 8002312:	4293      	cmp	r3, r2
 8002314:	d00d      	beq.n	8002332 <HAL_GPIO_Init+0x1fa>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	4a46      	ldr	r2, [pc, #280]	; (8002434 <HAL_GPIO_Init+0x2fc>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d007      	beq.n	800232e <HAL_GPIO_Init+0x1f6>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a45      	ldr	r2, [pc, #276]	; (8002438 <HAL_GPIO_Init+0x300>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d101      	bne.n	800232a <HAL_GPIO_Init+0x1f2>
 8002326:	2304      	movs	r3, #4
 8002328:	e008      	b.n	800233c <HAL_GPIO_Init+0x204>
 800232a:	2307      	movs	r3, #7
 800232c:	e006      	b.n	800233c <HAL_GPIO_Init+0x204>
 800232e:	2303      	movs	r3, #3
 8002330:	e004      	b.n	800233c <HAL_GPIO_Init+0x204>
 8002332:	2302      	movs	r3, #2
 8002334:	e002      	b.n	800233c <HAL_GPIO_Init+0x204>
 8002336:	2301      	movs	r3, #1
 8002338:	e000      	b.n	800233c <HAL_GPIO_Init+0x204>
 800233a:	2300      	movs	r3, #0
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	f002 0203 	and.w	r2, r2, #3
 8002342:	0092      	lsls	r2, r2, #2
 8002344:	4093      	lsls	r3, r2
 8002346:	69ba      	ldr	r2, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800234c:	4935      	ldr	r1, [pc, #212]	; (8002424 <HAL_GPIO_Init+0x2ec>)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	089b      	lsrs	r3, r3, #2
 8002352:	3302      	adds	r3, #2
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800235a:	4b38      	ldr	r3, [pc, #224]	; (800243c <HAL_GPIO_Init+0x304>)
 800235c:	689b      	ldr	r3, [r3, #8]
 800235e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	43db      	mvns	r3, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4013      	ands	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d003      	beq.n	800237e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800237e:	4a2f      	ldr	r2, [pc, #188]	; (800243c <HAL_GPIO_Init+0x304>)
 8002380:	69bb      	ldr	r3, [r7, #24]
 8002382:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002384:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_GPIO_Init+0x304>)
 8002386:	68db      	ldr	r3, [r3, #12]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	43db      	mvns	r3, r3
 800238e:	69ba      	ldr	r2, [r7, #24]
 8002390:	4013      	ands	r3, r2
 8002392:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d003      	beq.n	80023a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4313      	orrs	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023a8:	4a24      	ldr	r2, [pc, #144]	; (800243c <HAL_GPIO_Init+0x304>)
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023ae:	4b23      	ldr	r3, [pc, #140]	; (800243c <HAL_GPIO_Init+0x304>)
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d003      	beq.n	80023d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	4313      	orrs	r3, r2
 80023d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023d2:	4a1a      	ldr	r2, [pc, #104]	; (800243c <HAL_GPIO_Init+0x304>)
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <HAL_GPIO_Init+0x304>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d003      	beq.n	80023fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023fc:	4a0f      	ldr	r2, [pc, #60]	; (800243c <HAL_GPIO_Init+0x304>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002402:	69fb      	ldr	r3, [r7, #28]
 8002404:	3301      	adds	r3, #1
 8002406:	61fb      	str	r3, [r7, #28]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	2b0f      	cmp	r3, #15
 800240c:	f67f aea2 	bls.w	8002154 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002410:	bf00      	nop
 8002412:	bf00      	nop
 8002414:	3724      	adds	r7, #36	; 0x24
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	40013800 	.word	0x40013800
 8002428:	40020000 	.word	0x40020000
 800242c:	40020400 	.word	0x40020400
 8002430:	40020800 	.word	0x40020800
 8002434:	40020c00 	.word	0x40020c00
 8002438:	40021000 	.word	0x40021000
 800243c:	40013c00 	.word	0x40013c00

08002440 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
 8002448:	460b      	mov	r3, r1
 800244a:	807b      	strh	r3, [r7, #2]
 800244c:	4613      	mov	r3, r2
 800244e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002450:	787b      	ldrb	r3, [r7, #1]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d003      	beq.n	800245e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002456:	887a      	ldrh	r2, [r7, #2]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800245c:	e003      	b.n	8002466 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800245e:	887b      	ldrh	r3, [r7, #2]
 8002460:	041a      	lsls	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	619a      	str	r2, [r3, #24]
}
 8002466:	bf00      	nop
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002470:	4770      	bx	lr
	...

08002474 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b086      	sub	sp, #24
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
 8002484:	e267      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0301 	and.w	r3, r3, #1
 800248e:	2b00      	cmp	r3, #0
 8002490:	d075      	beq.n	800257e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002492:	4b88      	ldr	r3, [pc, #544]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	f003 030c 	and.w	r3, r3, #12
 800249a:	2b04      	cmp	r3, #4
 800249c:	d00c      	beq.n	80024b8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800249e:	4b85      	ldr	r3, [pc, #532]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d112      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024aa:	4b82      	ldr	r3, [pc, #520]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024b6:	d10b      	bne.n	80024d0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024b8:	4b7e      	ldr	r3, [pc, #504]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d05b      	beq.n	800257c <HAL_RCC_OscConfig+0x108>
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d157      	bne.n	800257c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	e242      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024d8:	d106      	bne.n	80024e8 <HAL_RCC_OscConfig+0x74>
 80024da:	4b76      	ldr	r3, [pc, #472]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a75      	ldr	r2, [pc, #468]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024e4:	6013      	str	r3, [r2, #0]
 80024e6:	e01d      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80024f0:	d10c      	bne.n	800250c <HAL_RCC_OscConfig+0x98>
 80024f2:	4b70      	ldr	r3, [pc, #448]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a6f      	ldr	r2, [pc, #444]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80024f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80024fc:	6013      	str	r3, [r2, #0]
 80024fe:	4b6d      	ldr	r3, [pc, #436]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4a6c      	ldr	r2, [pc, #432]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002508:	6013      	str	r3, [r2, #0]
 800250a:	e00b      	b.n	8002524 <HAL_RCC_OscConfig+0xb0>
 800250c:	4b69      	ldr	r3, [pc, #420]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a68      	ldr	r2, [pc, #416]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002512:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002516:	6013      	str	r3, [r2, #0]
 8002518:	4b66      	ldr	r3, [pc, #408]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a65      	ldr	r2, [pc, #404]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800251e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002522:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d013      	beq.n	8002554 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252c:	f7ff f976 	bl	800181c <HAL_GetTick>
 8002530:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002534:	f7ff f972 	bl	800181c <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	693b      	ldr	r3, [r7, #16]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b64      	cmp	r3, #100	; 0x64
 8002540:	d901      	bls.n	8002546 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e207      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002546:	4b5b      	ldr	r3, [pc, #364]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCC_OscConfig+0xc0>
 8002552:	e014      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002554:	f7ff f962 	bl	800181c <HAL_GetTick>
 8002558:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255a:	e008      	b.n	800256e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800255c:	f7ff f95e 	bl	800181c <HAL_GetTick>
 8002560:	4602      	mov	r2, r0
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	2b64      	cmp	r3, #100	; 0x64
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e1f3      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800256e:	4b51      	ldr	r3, [pc, #324]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d1f0      	bne.n	800255c <HAL_RCC_OscConfig+0xe8>
 800257a:	e000      	b.n	800257e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800257c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0302 	and.w	r3, r3, #2
 8002586:	2b00      	cmp	r3, #0
 8002588:	d063      	beq.n	8002652 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800258a:	4b4a      	ldr	r3, [pc, #296]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f003 030c 	and.w	r3, r3, #12
 8002592:	2b00      	cmp	r3, #0
 8002594:	d00b      	beq.n	80025ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002596:	4b47      	ldr	r3, [pc, #284]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002598:	689b      	ldr	r3, [r3, #8]
 800259a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800259e:	2b08      	cmp	r3, #8
 80025a0:	d11c      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025a2:	4b44      	ldr	r3, [pc, #272]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d116      	bne.n	80025dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ae:	4b41      	ldr	r3, [pc, #260]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d005      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	2b01      	cmp	r3, #1
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e1c7      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025c6:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	691b      	ldr	r3, [r3, #16]
 80025d2:	00db      	lsls	r3, r3, #3
 80025d4:	4937      	ldr	r1, [pc, #220]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025da:	e03a      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d020      	beq.n	8002626 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025e4:	4b34      	ldr	r3, [pc, #208]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 80025e6:	2201      	movs	r2, #1
 80025e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ea:	f7ff f917 	bl	800181c <HAL_GetTick>
 80025ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f0:	e008      	b.n	8002604 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025f2:	f7ff f913 	bl	800181c <HAL_GetTick>
 80025f6:	4602      	mov	r2, r0
 80025f8:	693b      	ldr	r3, [r7, #16]
 80025fa:	1ad3      	subs	r3, r2, r3
 80025fc:	2b02      	cmp	r3, #2
 80025fe:	d901      	bls.n	8002604 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002600:	2303      	movs	r3, #3
 8002602:	e1a8      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002604:	4b2b      	ldr	r3, [pc, #172]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0302 	and.w	r3, r3, #2
 800260c:	2b00      	cmp	r3, #0
 800260e:	d0f0      	beq.n	80025f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002610:	4b28      	ldr	r3, [pc, #160]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	00db      	lsls	r3, r3, #3
 800261e:	4925      	ldr	r1, [pc, #148]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002620:	4313      	orrs	r3, r2
 8002622:	600b      	str	r3, [r1, #0]
 8002624:	e015      	b.n	8002652 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCC_OscConfig+0x244>)
 8002628:	2200      	movs	r2, #0
 800262a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7ff f8f6 	bl	800181c <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002634:	f7ff f8f2 	bl	800181c <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e187      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002646:	4b1b      	ldr	r3, [pc, #108]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d1f0      	bne.n	8002634 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f003 0308 	and.w	r3, r3, #8
 800265a:	2b00      	cmp	r3, #0
 800265c:	d036      	beq.n	80026cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002666:	4b15      	ldr	r3, [pc, #84]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002668:	2201      	movs	r2, #1
 800266a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800266c:	f7ff f8d6 	bl	800181c <HAL_GetTick>
 8002670:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002672:	e008      	b.n	8002686 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002674:	f7ff f8d2 	bl	800181c <HAL_GetTick>
 8002678:	4602      	mov	r2, r0
 800267a:	693b      	ldr	r3, [r7, #16]
 800267c:	1ad3      	subs	r3, r2, r3
 800267e:	2b02      	cmp	r3, #2
 8002680:	d901      	bls.n	8002686 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002682:	2303      	movs	r3, #3
 8002684:	e167      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002686:	4b0b      	ldr	r3, [pc, #44]	; (80026b4 <HAL_RCC_OscConfig+0x240>)
 8002688:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0f0      	beq.n	8002674 <HAL_RCC_OscConfig+0x200>
 8002692:	e01b      	b.n	80026cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002694:	4b09      	ldr	r3, [pc, #36]	; (80026bc <HAL_RCC_OscConfig+0x248>)
 8002696:	2200      	movs	r2, #0
 8002698:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800269a:	f7ff f8bf 	bl	800181c <HAL_GetTick>
 800269e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a0:	e00e      	b.n	80026c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026a2:	f7ff f8bb 	bl	800181c <HAL_GetTick>
 80026a6:	4602      	mov	r2, r0
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	2b02      	cmp	r3, #2
 80026ae:	d907      	bls.n	80026c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80026b0:	2303      	movs	r3, #3
 80026b2:	e150      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80026b4:	40023800 	.word	0x40023800
 80026b8:	42470000 	.word	0x42470000
 80026bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c0:	4b88      	ldr	r3, [pc, #544]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d1ea      	bne.n	80026a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0304 	and.w	r3, r3, #4
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	f000 8097 	beq.w	8002808 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026da:	2300      	movs	r3, #0
 80026dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026de:	4b81      	ldr	r3, [pc, #516]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d10f      	bne.n	800270a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026ea:	2300      	movs	r3, #0
 80026ec:	60bb      	str	r3, [r7, #8]
 80026ee:	4b7d      	ldr	r3, [pc, #500]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	4a7c      	ldr	r2, [pc, #496]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026f8:	6413      	str	r3, [r2, #64]	; 0x40
 80026fa:	4b7a      	ldr	r3, [pc, #488]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002702:	60bb      	str	r3, [r7, #8]
 8002704:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002706:	2301      	movs	r3, #1
 8002708:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800270a:	4b77      	ldr	r3, [pc, #476]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002712:	2b00      	cmp	r3, #0
 8002714:	d118      	bne.n	8002748 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002716:	4b74      	ldr	r3, [pc, #464]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a73      	ldr	r2, [pc, #460]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800271c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002720:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002722:	f7ff f87b 	bl	800181c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002728:	e008      	b.n	800273c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800272a:	f7ff f877 	bl	800181c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	2b02      	cmp	r3, #2
 8002736:	d901      	bls.n	800273c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002738:	2303      	movs	r3, #3
 800273a:	e10c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800273c:	4b6a      	ldr	r3, [pc, #424]	; (80028e8 <HAL_RCC_OscConfig+0x474>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002744:	2b00      	cmp	r3, #0
 8002746:	d0f0      	beq.n	800272a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	689b      	ldr	r3, [r3, #8]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d106      	bne.n	800275e <HAL_RCC_OscConfig+0x2ea>
 8002750:	4b64      	ldr	r3, [pc, #400]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	4a63      	ldr	r2, [pc, #396]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	6713      	str	r3, [r2, #112]	; 0x70
 800275c:	e01c      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	689b      	ldr	r3, [r3, #8]
 8002762:	2b05      	cmp	r3, #5
 8002764:	d10c      	bne.n	8002780 <HAL_RCC_OscConfig+0x30c>
 8002766:	4b5f      	ldr	r3, [pc, #380]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276a:	4a5e      	ldr	r2, [pc, #376]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	6713      	str	r3, [r2, #112]	; 0x70
 8002772:	4b5c      	ldr	r3, [pc, #368]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	4a5b      	ldr	r2, [pc, #364]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002778:	f043 0301 	orr.w	r3, r3, #1
 800277c:	6713      	str	r3, [r2, #112]	; 0x70
 800277e:	e00b      	b.n	8002798 <HAL_RCC_OscConfig+0x324>
 8002780:	4b58      	ldr	r3, [pc, #352]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002784:	4a57      	ldr	r2, [pc, #348]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 0301 	bic.w	r3, r3, #1
 800278a:	6713      	str	r3, [r2, #112]	; 0x70
 800278c:	4b55      	ldr	r3, [pc, #340]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800278e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002790:	4a54      	ldr	r2, [pc, #336]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002792:	f023 0304 	bic.w	r3, r3, #4
 8002796:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d015      	beq.n	80027cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a0:	f7ff f83c 	bl	800181c <HAL_GetTick>
 80027a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	e00a      	b.n	80027be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027a8:	f7ff f838 	bl	800181c <HAL_GetTick>
 80027ac:	4602      	mov	r2, r0
 80027ae:	693b      	ldr	r3, [r7, #16]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e0cb      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027be:	4b49      	ldr	r3, [pc, #292]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d0ee      	beq.n	80027a8 <HAL_RCC_OscConfig+0x334>
 80027ca:	e014      	b.n	80027f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027cc:	f7ff f826 	bl	800181c <HAL_GetTick>
 80027d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	e00a      	b.n	80027ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027d4:	f7ff f822 	bl	800181c <HAL_GetTick>
 80027d8:	4602      	mov	r2, r0
 80027da:	693b      	ldr	r3, [r7, #16]
 80027dc:	1ad3      	subs	r3, r2, r3
 80027de:	f241 3288 	movw	r2, #5000	; 0x1388
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d901      	bls.n	80027ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e0b5      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ea:	4b3e      	ldr	r3, [pc, #248]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ee:	f003 0302 	and.w	r3, r3, #2
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d1ee      	bne.n	80027d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f6:	7dfb      	ldrb	r3, [r7, #23]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d105      	bne.n	8002808 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027fc:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80027fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002800:	4a38      	ldr	r2, [pc, #224]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002802:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002806:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	2b00      	cmp	r3, #0
 800280e:	f000 80a1 	beq.w	8002954 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002812:	4b34      	ldr	r3, [pc, #208]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002814:	689b      	ldr	r3, [r3, #8]
 8002816:	f003 030c 	and.w	r3, r3, #12
 800281a:	2b08      	cmp	r3, #8
 800281c:	d05c      	beq.n	80028d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	699b      	ldr	r3, [r3, #24]
 8002822:	2b02      	cmp	r3, #2
 8002824:	d141      	bne.n	80028aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002826:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 8002828:	2200      	movs	r2, #0
 800282a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800282c:	f7fe fff6 	bl	800181c <HAL_GetTick>
 8002830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002834:	f7fe fff2 	bl	800181c <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e087      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002846:	4b27      	ldr	r3, [pc, #156]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d1f0      	bne.n	8002834 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	69da      	ldr	r2, [r3, #28]
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	431a      	orrs	r2, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002868:	085b      	lsrs	r3, r3, #1
 800286a:	3b01      	subs	r3, #1
 800286c:	041b      	lsls	r3, r3, #16
 800286e:	431a      	orrs	r2, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002874:	061b      	lsls	r3, r3, #24
 8002876:	491b      	ldr	r1, [pc, #108]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 8002878:	4313      	orrs	r3, r2
 800287a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800287c:	4b1b      	ldr	r3, [pc, #108]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 800287e:	2201      	movs	r2, #1
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe ffcb 	bl	800181c <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe ffc7 	bl	800181c <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e05c      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289c:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d0f0      	beq.n	800288a <HAL_RCC_OscConfig+0x416>
 80028a8:	e054      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028aa:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x478>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7fe ffb4 	bl	800181c <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028b8:	f7fe ffb0 	bl	800181c <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e045      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ca:	4b06      	ldr	r3, [pc, #24]	; (80028e4 <HAL_RCC_OscConfig+0x470>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x444>
 80028d6:	e03d      	b.n	8002954 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b01      	cmp	r3, #1
 80028de:	d107      	bne.n	80028f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e038      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
 80028e4:	40023800 	.word	0x40023800
 80028e8:	40007000 	.word	0x40007000
 80028ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028f0:	4b1b      	ldr	r3, [pc, #108]	; (8002960 <HAL_RCC_OscConfig+0x4ec>)
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	699b      	ldr	r3, [r3, #24]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d028      	beq.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002908:	429a      	cmp	r2, r3
 800290a:	d121      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	429a      	cmp	r2, r3
 8002918:	d11a      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002920:	4013      	ands	r3, r2
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002926:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002928:	4293      	cmp	r3, r2
 800292a:	d111      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	3b01      	subs	r3, #1
 800293a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d101      	bne.n	8002978 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	e0cc      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002978:	4b68      	ldr	r3, [pc, #416]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	683a      	ldr	r2, [r7, #0]
 8002982:	429a      	cmp	r2, r3
 8002984:	d90c      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002986:	4b65      	ldr	r3, [pc, #404]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	b2d2      	uxtb	r2, r2
 800298c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b63      	ldr	r3, [pc, #396]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e0b8      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d020      	beq.n	80029ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0304 	and.w	r3, r3, #4
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029b8:	4b59      	ldr	r3, [pc, #356]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	4a58      	ldr	r2, [pc, #352]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80029c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d005      	beq.n	80029dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029d0:	4b53      	ldr	r3, [pc, #332]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d2:	689b      	ldr	r3, [r3, #8]
 80029d4:	4a52      	ldr	r2, [pc, #328]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80029da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029dc:	4b50      	ldr	r3, [pc, #320]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	494d      	ldr	r1, [pc, #308]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 0301 	and.w	r3, r3, #1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d044      	beq.n	8002a84 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b01      	cmp	r3, #1
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	4b47      	ldr	r3, [pc, #284]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d119      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e07f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	2b02      	cmp	r3, #2
 8002a18:	d003      	beq.n	8002a22 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a22:	4b3f      	ldr	r3, [pc, #252]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d109      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e06f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a32:	4b3b      	ldr	r3, [pc, #236]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e067      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a42:	4b37      	ldr	r3, [pc, #220]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	f023 0203 	bic.w	r2, r3, #3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	4934      	ldr	r1, [pc, #208]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a54:	f7fe fee2 	bl	800181c <HAL_GetTick>
 8002a58:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a5a:	e00a      	b.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a5c:	f7fe fede 	bl	800181c <HAL_GetTick>
 8002a60:	4602      	mov	r2, r0
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	1ad3      	subs	r3, r2, r3
 8002a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e04f      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a72:	4b2b      	ldr	r3, [pc, #172]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 020c 	and.w	r2, r3, #12
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d1eb      	bne.n	8002a5c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a84:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	683a      	ldr	r2, [r7, #0]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d20c      	bcs.n	8002aac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a94:	683a      	ldr	r2, [r7, #0]
 8002a96:	b2d2      	uxtb	r2, r2
 8002a98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_RCC_ClockConfig+0x1b8>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f003 0307 	and.w	r3, r3, #7
 8002aa2:	683a      	ldr	r2, [r7, #0]
 8002aa4:	429a      	cmp	r2, r3
 8002aa6:	d001      	beq.n	8002aac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	e032      	b.n	8002b12 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d008      	beq.n	8002aca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002ab8:	4b19      	ldr	r3, [pc, #100]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	4916      	ldr	r1, [pc, #88]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0308 	and.w	r3, r3, #8
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d009      	beq.n	8002aea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ad6:	4b12      	ldr	r3, [pc, #72]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	00db      	lsls	r3, r3, #3
 8002ae4:	490e      	ldr	r1, [pc, #56]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae6:	4313      	orrs	r3, r2
 8002ae8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002aea:	f000 f821 	bl	8002b30 <HAL_RCC_GetSysClockFreq>
 8002aee:	4602      	mov	r2, r0
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <HAL_RCC_ClockConfig+0x1bc>)
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 030f 	and.w	r3, r3, #15
 8002afa:	490a      	ldr	r1, [pc, #40]	; (8002b24 <HAL_RCC_ClockConfig+0x1c0>)
 8002afc:	5ccb      	ldrb	r3, [r1, r3]
 8002afe:	fa22 f303 	lsr.w	r3, r2, r3
 8002b02:	4a09      	ldr	r2, [pc, #36]	; (8002b28 <HAL_RCC_ClockConfig+0x1c4>)
 8002b04:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b06:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <HAL_RCC_ClockConfig+0x1c8>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7fe fe42 	bl	8001794 <HAL_InitTick>

  return HAL_OK;
 8002b10:	2300      	movs	r3, #0
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3710      	adds	r7, #16
 8002b16:	46bd      	mov	sp, r7
 8002b18:	bd80      	pop	{r7, pc}
 8002b1a:	bf00      	nop
 8002b1c:	40023c00 	.word	0x40023c00
 8002b20:	40023800 	.word	0x40023800
 8002b24:	08004a88 	.word	0x08004a88
 8002b28:	2000000c 	.word	0x2000000c
 8002b2c:	20000010 	.word	0x20000010

08002b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b34:	b094      	sub	sp, #80	; 0x50
 8002b36:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	647b      	str	r3, [r7, #68]	; 0x44
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002b40:	2300      	movs	r3, #0
 8002b42:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002b44:	2300      	movs	r3, #0
 8002b46:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b48:	4b79      	ldr	r3, [pc, #484]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b4a:	689b      	ldr	r3, [r3, #8]
 8002b4c:	f003 030c 	and.w	r3, r3, #12
 8002b50:	2b08      	cmp	r3, #8
 8002b52:	d00d      	beq.n	8002b70 <HAL_RCC_GetSysClockFreq+0x40>
 8002b54:	2b08      	cmp	r3, #8
 8002b56:	f200 80e1 	bhi.w	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d002      	beq.n	8002b64 <HAL_RCC_GetSysClockFreq+0x34>
 8002b5e:	2b04      	cmp	r3, #4
 8002b60:	d003      	beq.n	8002b6a <HAL_RCC_GetSysClockFreq+0x3a>
 8002b62:	e0db      	b.n	8002d1c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002b64:	4b73      	ldr	r3, [pc, #460]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b66:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002b68:	e0db      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002b6a:	4b73      	ldr	r3, [pc, #460]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x208>)
 8002b6c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6e:	e0d8      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002b70:	4b6f      	ldr	r3, [pc, #444]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b78:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b7a:	4b6d      	ldr	r3, [pc, #436]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d063      	beq.n	8002c4e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b86:	4b6a      	ldr	r3, [pc, #424]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	099b      	lsrs	r3, r3, #6
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b90:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b98:	633b      	str	r3, [r7, #48]	; 0x30
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	637b      	str	r3, [r7, #52]	; 0x34
 8002b9e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ba2:	4622      	mov	r2, r4
 8002ba4:	462b      	mov	r3, r5
 8002ba6:	f04f 0000 	mov.w	r0, #0
 8002baa:	f04f 0100 	mov.w	r1, #0
 8002bae:	0159      	lsls	r1, r3, #5
 8002bb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bb4:	0150      	lsls	r0, r2, #5
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4621      	mov	r1, r4
 8002bbc:	1a51      	subs	r1, r2, r1
 8002bbe:	6139      	str	r1, [r7, #16]
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	eb63 0301 	sbc.w	r3, r3, r1
 8002bc6:	617b      	str	r3, [r7, #20]
 8002bc8:	f04f 0200 	mov.w	r2, #0
 8002bcc:	f04f 0300 	mov.w	r3, #0
 8002bd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	018b      	lsls	r3, r1, #6
 8002bd8:	4651      	mov	r1, sl
 8002bda:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002bde:	4651      	mov	r1, sl
 8002be0:	018a      	lsls	r2, r1, #6
 8002be2:	4651      	mov	r1, sl
 8002be4:	ebb2 0801 	subs.w	r8, r2, r1
 8002be8:	4659      	mov	r1, fp
 8002bea:	eb63 0901 	sbc.w	r9, r3, r1
 8002bee:	f04f 0200 	mov.w	r2, #0
 8002bf2:	f04f 0300 	mov.w	r3, #0
 8002bf6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002bfa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002bfe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c02:	4690      	mov	r8, r2
 8002c04:	4699      	mov	r9, r3
 8002c06:	4623      	mov	r3, r4
 8002c08:	eb18 0303 	adds.w	r3, r8, r3
 8002c0c:	60bb      	str	r3, [r7, #8]
 8002c0e:	462b      	mov	r3, r5
 8002c10:	eb49 0303 	adc.w	r3, r9, r3
 8002c14:	60fb      	str	r3, [r7, #12]
 8002c16:	f04f 0200 	mov.w	r2, #0
 8002c1a:	f04f 0300 	mov.w	r3, #0
 8002c1e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002c22:	4629      	mov	r1, r5
 8002c24:	024b      	lsls	r3, r1, #9
 8002c26:	4621      	mov	r1, r4
 8002c28:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002c2c:	4621      	mov	r1, r4
 8002c2e:	024a      	lsls	r2, r1, #9
 8002c30:	4610      	mov	r0, r2
 8002c32:	4619      	mov	r1, r3
 8002c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c36:	2200      	movs	r2, #0
 8002c38:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c3a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002c40:	f7fd fee8 	bl	8000a14 <__aeabi_uldivmod>
 8002c44:	4602      	mov	r2, r0
 8002c46:	460b      	mov	r3, r1
 8002c48:	4613      	mov	r3, r2
 8002c4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c4c:	e058      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c4e:	4b38      	ldr	r3, [pc, #224]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	099b      	lsrs	r3, r3, #6
 8002c54:	2200      	movs	r2, #0
 8002c56:	4618      	mov	r0, r3
 8002c58:	4611      	mov	r1, r2
 8002c5a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	2300      	movs	r3, #0
 8002c62:	627b      	str	r3, [r7, #36]	; 0x24
 8002c64:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002c68:	4642      	mov	r2, r8
 8002c6a:	464b      	mov	r3, r9
 8002c6c:	f04f 0000 	mov.w	r0, #0
 8002c70:	f04f 0100 	mov.w	r1, #0
 8002c74:	0159      	lsls	r1, r3, #5
 8002c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c7a:	0150      	lsls	r0, r2, #5
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4641      	mov	r1, r8
 8002c82:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c86:	4649      	mov	r1, r9
 8002c88:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c8c:	f04f 0200 	mov.w	r2, #0
 8002c90:	f04f 0300 	mov.w	r3, #0
 8002c94:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c98:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c9c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002ca0:	ebb2 040a 	subs.w	r4, r2, sl
 8002ca4:	eb63 050b 	sbc.w	r5, r3, fp
 8002ca8:	f04f 0200 	mov.w	r2, #0
 8002cac:	f04f 0300 	mov.w	r3, #0
 8002cb0:	00eb      	lsls	r3, r5, #3
 8002cb2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cb6:	00e2      	lsls	r2, r4, #3
 8002cb8:	4614      	mov	r4, r2
 8002cba:	461d      	mov	r5, r3
 8002cbc:	4643      	mov	r3, r8
 8002cbe:	18e3      	adds	r3, r4, r3
 8002cc0:	603b      	str	r3, [r7, #0]
 8002cc2:	464b      	mov	r3, r9
 8002cc4:	eb45 0303 	adc.w	r3, r5, r3
 8002cc8:	607b      	str	r3, [r7, #4]
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002cd6:	4629      	mov	r1, r5
 8002cd8:	028b      	lsls	r3, r1, #10
 8002cda:	4621      	mov	r1, r4
 8002cdc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ce0:	4621      	mov	r1, r4
 8002ce2:	028a      	lsls	r2, r1, #10
 8002ce4:	4610      	mov	r0, r2
 8002ce6:	4619      	mov	r1, r3
 8002ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cea:	2200      	movs	r2, #0
 8002cec:	61bb      	str	r3, [r7, #24]
 8002cee:	61fa      	str	r2, [r7, #28]
 8002cf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002cf4:	f7fd fe8e 	bl	8000a14 <__aeabi_uldivmod>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	460b      	mov	r3, r1
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	0c1b      	lsrs	r3, r3, #16
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	3301      	adds	r3, #1
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002d10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002d12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d18:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d1a:	e002      	b.n	8002d22 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d1c:	4b05      	ldr	r3, [pc, #20]	; (8002d34 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d1e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002d20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	3750      	adds	r7, #80	; 0x50
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d2e:	bf00      	nop
 8002d30:	40023800 	.word	0x40023800
 8002d34:	00f42400 	.word	0x00f42400
 8002d38:	007a1200 	.word	0x007a1200

08002d3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d40:	4b03      	ldr	r3, [pc, #12]	; (8002d50 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d42:	681b      	ldr	r3, [r3, #0]
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	46bd      	mov	sp, r7
 8002d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4c:	4770      	bx	lr
 8002d4e:	bf00      	nop
 8002d50:	2000000c 	.word	0x2000000c

08002d54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d58:	f7ff fff0 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	4b05      	ldr	r3, [pc, #20]	; (8002d74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	0a9b      	lsrs	r3, r3, #10
 8002d64:	f003 0307 	and.w	r3, r3, #7
 8002d68:	4903      	ldr	r1, [pc, #12]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d6a:	5ccb      	ldrb	r3, [r1, r3]
 8002d6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	40023800 	.word	0x40023800
 8002d78:	08004a98 	.word	0x08004a98

08002d7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d80:	f7ff ffdc 	bl	8002d3c <HAL_RCC_GetHCLKFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b05      	ldr	r3, [pc, #20]	; (8002d9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	0b5b      	lsrs	r3, r3, #13
 8002d8c:	f003 0307 	and.w	r3, r3, #7
 8002d90:	4903      	ldr	r1, [pc, #12]	; (8002da0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40023800 	.word	0x40023800
 8002da0:	08004a98 	.word	0x08004a98

08002da4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e041      	b.n	8002e3a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d106      	bne.n	8002dd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dca:	6878      	ldr	r0, [r7, #4]
 8002dcc:	f7fe fb3e 	bl	800144c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3304      	adds	r3, #4
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f000 feac 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2201      	movs	r2, #1
 8002df4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2201      	movs	r2, #1
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e03c      	b.n	8002ed6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1e      	ldr	r2, [pc, #120]	; (8002ee4 <HAL_TIM_Base_Start+0xa0>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d018      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x5c>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e76:	d013      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x5c>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_TIM_Base_Start+0xa4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d00e      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x5c>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a19      	ldr	r2, [pc, #100]	; (8002eec <HAL_TIM_Base_Start+0xa8>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d009      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x5c>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_TIM_Base_Start+0xac>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d004      	beq.n	8002ea0 <HAL_TIM_Base_Start+0x5c>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <HAL_TIM_Base_Start+0xb0>)
 8002e9c:	4293      	cmp	r3, r2
 8002e9e:	d111      	bne.n	8002ec4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 0307 	and.w	r3, r3, #7
 8002eaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2b06      	cmp	r3, #6
 8002eb0:	d010      	beq.n	8002ed4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	681a      	ldr	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f042 0201 	orr.w	r2, r2, #1
 8002ec0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ec2:	e007      	b.n	8002ed4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f042 0201 	orr.w	r2, r2, #1
 8002ed2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	40010000 	.word	0x40010000
 8002ee8:	40000400 	.word	0x40000400
 8002eec:	40000800 	.word	0x40000800
 8002ef0:	40000c00 	.word	0x40000c00
 8002ef4:	40014000 	.word	0x40014000

08002ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d101      	bne.n	8002f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e041      	b.n	8002f8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d106      	bne.n	8002f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f839 	bl	8002f96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2202      	movs	r2, #2
 8002f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	3304      	adds	r3, #4
 8002f34:	4619      	mov	r1, r3
 8002f36:	4610      	mov	r0, r2
 8002f38:	f000 fe02 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f8c:	2300      	movs	r3, #0
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b083      	sub	sp, #12
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d109      	bne.n	8002fd0 <HAL_TIM_PWM_Start+0x24>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	bf14      	ite	ne
 8002fc8:	2301      	movne	r3, #1
 8002fca:	2300      	moveq	r3, #0
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	e022      	b.n	8003016 <HAL_TIM_PWM_Start+0x6a>
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	2b04      	cmp	r3, #4
 8002fd4:	d109      	bne.n	8002fea <HAL_TIM_PWM_Start+0x3e>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fdc:	b2db      	uxtb	r3, r3
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	bf14      	ite	ne
 8002fe2:	2301      	movne	r3, #1
 8002fe4:	2300      	moveq	r3, #0
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	e015      	b.n	8003016 <HAL_TIM_PWM_Start+0x6a>
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d109      	bne.n	8003004 <HAL_TIM_PWM_Start+0x58>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	bf14      	ite	ne
 8002ffc:	2301      	movne	r3, #1
 8002ffe:	2300      	moveq	r3, #0
 8003000:	b2db      	uxtb	r3, r3
 8003002:	e008      	b.n	8003016 <HAL_TIM_PWM_Start+0x6a>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800300a:	b2db      	uxtb	r3, r3
 800300c:	2b01      	cmp	r3, #1
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d001      	beq.n	800301e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	e068      	b.n	80030f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d104      	bne.n	800302e <HAL_TIM_PWM_Start+0x82>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2202      	movs	r2, #2
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800302c:	e013      	b.n	8003056 <HAL_TIM_PWM_Start+0xaa>
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	2b04      	cmp	r3, #4
 8003032:	d104      	bne.n	800303e <HAL_TIM_PWM_Start+0x92>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800303c:	e00b      	b.n	8003056 <HAL_TIM_PWM_Start+0xaa>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	2b08      	cmp	r3, #8
 8003042:	d104      	bne.n	800304e <HAL_TIM_PWM_Start+0xa2>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2202      	movs	r2, #2
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800304c:	e003      	b.n	8003056 <HAL_TIM_PWM_Start+0xaa>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2202      	movs	r2, #2
 8003052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2201      	movs	r2, #1
 800305c:	6839      	ldr	r1, [r7, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f001 f932 	bl	80042c8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a23      	ldr	r2, [pc, #140]	; (80030f8 <HAL_TIM_PWM_Start+0x14c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d107      	bne.n	800307e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800307c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a1d      	ldr	r2, [pc, #116]	; (80030f8 <HAL_TIM_PWM_Start+0x14c>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d018      	beq.n	80030ba <HAL_TIM_PWM_Start+0x10e>
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003090:	d013      	beq.n	80030ba <HAL_TIM_PWM_Start+0x10e>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a19      	ldr	r2, [pc, #100]	; (80030fc <HAL_TIM_PWM_Start+0x150>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d00e      	beq.n	80030ba <HAL_TIM_PWM_Start+0x10e>
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a17      	ldr	r2, [pc, #92]	; (8003100 <HAL_TIM_PWM_Start+0x154>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d009      	beq.n	80030ba <HAL_TIM_PWM_Start+0x10e>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a16      	ldr	r2, [pc, #88]	; (8003104 <HAL_TIM_PWM_Start+0x158>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d004      	beq.n	80030ba <HAL_TIM_PWM_Start+0x10e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a14      	ldr	r2, [pc, #80]	; (8003108 <HAL_TIM_PWM_Start+0x15c>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d111      	bne.n	80030de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2b06      	cmp	r3, #6
 80030ca:	d010      	beq.n	80030ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f042 0201 	orr.w	r2, r2, #1
 80030da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030dc:	e007      	b.n	80030ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 0201 	orr.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3710      	adds	r7, #16
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	40010000 	.word	0x40010000
 80030fc:	40000400 	.word	0x40000400
 8003100:	40000800 	.word	0x40000800
 8003104:	40000c00 	.word	0x40000c00
 8003108:	40014000 	.word	0x40014000

0800310c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b082      	sub	sp, #8
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e041      	b.n	80031a2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f839 	bl	80031aa <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681a      	ldr	r2, [r3, #0]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	3304      	adds	r3, #4
 8003148:	4619      	mov	r1, r3
 800314a:	4610      	mov	r0, r2
 800314c:	f000 fcf8 	bl	8003b40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2201      	movs	r2, #1
 800315c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2201      	movs	r2, #1
 8003164:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2201      	movs	r2, #1
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2201      	movs	r2, #1
 8003174:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3708      	adds	r7, #8
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80031aa:	b480      	push	{r7}
 80031ac:	b083      	sub	sp, #12
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
	...

080031c0 <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	607a      	str	r2, [r7, #4]
 80031cc:	807b      	strh	r3, [r7, #2]
  HAL_StatusTypeDef status = HAL_OK;
 80031ce:	2300      	movs	r3, #0
 80031d0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d104      	bne.n	80031e2 <HAL_TIM_IC_Start_DMA+0x22>
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	e013      	b.n	800320a <HAL_TIM_IC_Start_DMA+0x4a>
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d104      	bne.n	80031f2 <HAL_TIM_IC_Start_DMA+0x32>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	e00b      	b.n	800320a <HAL_TIM_IC_Start_DMA+0x4a>
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	2b08      	cmp	r3, #8
 80031f6:	d104      	bne.n	8003202 <HAL_TIM_IC_Start_DMA+0x42>
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80031fe:	b2db      	uxtb	r3, r3
 8003200:	e003      	b.n	800320a <HAL_TIM_IC_Start_DMA+0x4a>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	75bb      	strb	r3, [r7, #22]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d104      	bne.n	800321c <HAL_TIM_IC_Start_DMA+0x5c>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003218:	b2db      	uxtb	r3, r3
 800321a:	e013      	b.n	8003244 <HAL_TIM_IC_Start_DMA+0x84>
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	2b04      	cmp	r3, #4
 8003220:	d104      	bne.n	800322c <HAL_TIM_IC_Start_DMA+0x6c>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003228:	b2db      	uxtb	r3, r3
 800322a:	e00b      	b.n	8003244 <HAL_TIM_IC_Start_DMA+0x84>
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2b08      	cmp	r3, #8
 8003230:	d104      	bne.n	800323c <HAL_TIM_IC_Start_DMA+0x7c>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003238:	b2db      	uxtb	r3, r3
 800323a:	e003      	b.n	8003244 <HAL_TIM_IC_Start_DMA+0x84>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003242:	b2db      	uxtb	r3, r3
 8003244:	757b      	strb	r3, [r7, #21]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 8003246:	7dbb      	ldrb	r3, [r7, #22]
 8003248:	2b02      	cmp	r3, #2
 800324a:	d002      	beq.n	8003252 <HAL_TIM_IC_Start_DMA+0x92>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 800324c:	7d7b      	ldrb	r3, [r7, #21]
 800324e:	2b02      	cmp	r3, #2
 8003250:	d101      	bne.n	8003256 <HAL_TIM_IC_Start_DMA+0x96>
  {
    return HAL_BUSY;
 8003252:	2302      	movs	r3, #2
 8003254:	e13c      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 8003256:	7dbb      	ldrb	r3, [r7, #22]
 8003258:	2b01      	cmp	r3, #1
 800325a:	d143      	bne.n	80032e4 <HAL_TIM_IC_Start_DMA+0x124>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 800325c:	7d7b      	ldrb	r3, [r7, #21]
 800325e:	2b01      	cmp	r3, #1
 8003260:	d140      	bne.n	80032e4 <HAL_TIM_IC_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_IC_Start_DMA+0xb2>
 8003268:	887b      	ldrh	r3, [r7, #2]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d001      	beq.n	8003272 <HAL_TIM_IC_Start_DMA+0xb2>
    {
      return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e12e      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d104      	bne.n	8003282 <HAL_TIM_IC_Start_DMA+0xc2>
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003280:	e013      	b.n	80032aa <HAL_TIM_IC_Start_DMA+0xea>
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	2b04      	cmp	r3, #4
 8003286:	d104      	bne.n	8003292 <HAL_TIM_IC_Start_DMA+0xd2>
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003290:	e00b      	b.n	80032aa <HAL_TIM_IC_Start_DMA+0xea>
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d104      	bne.n	80032a2 <HAL_TIM_IC_Start_DMA+0xe2>
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032a0:	e003      	b.n	80032aa <HAL_TIM_IC_Start_DMA+0xea>
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2202      	movs	r2, #2
 80032a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032aa:	68bb      	ldr	r3, [r7, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d104      	bne.n	80032ba <HAL_TIM_IC_Start_DMA+0xfa>
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2202      	movs	r2, #2
 80032b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 80032b8:	e016      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	2b04      	cmp	r3, #4
 80032be:	d104      	bne.n	80032ca <HAL_TIM_IC_Start_DMA+0x10a>
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2202      	movs	r2, #2
 80032c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 80032c8:	e00e      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	2b08      	cmp	r3, #8
 80032ce:	d104      	bne.n	80032da <HAL_TIM_IC_Start_DMA+0x11a>
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 80032d8:	e006      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x128>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	2202      	movs	r2, #2
 80032de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 80032e2:	e001      	b.n	80032e8 <HAL_TIM_IC_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80032e4:	2301      	movs	r3, #1
 80032e6:	e0f3      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2201      	movs	r2, #1
 80032ee:	68b9      	ldr	r1, [r7, #8]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f000 ffe9 	bl	80042c8 <TIM_CCxChannelCmd>

  switch (Channel)
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2b0c      	cmp	r3, #12
 80032fa:	f200 80ad 	bhi.w	8003458 <HAL_TIM_IC_Start_DMA+0x298>
 80032fe:	a201      	add	r2, pc, #4	; (adr r2, 8003304 <HAL_TIM_IC_Start_DMA+0x144>)
 8003300:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003304:	08003339 	.word	0x08003339
 8003308:	08003459 	.word	0x08003459
 800330c:	08003459 	.word	0x08003459
 8003310:	08003459 	.word	0x08003459
 8003314:	08003381 	.word	0x08003381
 8003318:	08003459 	.word	0x08003459
 800331c:	08003459 	.word	0x08003459
 8003320:	08003459 	.word	0x08003459
 8003324:	080033c9 	.word	0x080033c9
 8003328:	08003459 	.word	0x08003459
 800332c:	08003459 	.word	0x08003459
 8003330:	08003459 	.word	0x08003459
 8003334:	08003411 	.word	0x08003411
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333c:	4a66      	ldr	r2, [pc, #408]	; (80034d8 <HAL_TIM_IC_Start_DMA+0x318>)
 800333e:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003344:	4a65      	ldr	r2, [pc, #404]	; (80034dc <HAL_TIM_IC_Start_DMA+0x31c>)
 8003346:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334c:	4a64      	ldr	r2, [pc, #400]	; (80034e0 <HAL_TIM_IC_Start_DMA+0x320>)
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData,
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3334      	adds	r3, #52	; 0x34
 800335a:	4619      	mov	r1, r3
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	887b      	ldrh	r3, [r7, #2]
 8003360:	f7fe fc28 	bl	8001bb4 <HAL_DMA_Start_IT>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <HAL_TIM_IC_Start_DMA+0x1ae>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e0b0      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800337c:	60da      	str	r2, [r3, #12]
      break;
 800337e:	e06e      	b.n	800345e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003384:	4a54      	ldr	r2, [pc, #336]	; (80034d8 <HAL_TIM_IC_Start_DMA+0x318>)
 8003386:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800338c:	4a53      	ldr	r2, [pc, #332]	; (80034dc <HAL_TIM_IC_Start_DMA+0x31c>)
 800338e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003394:	4a52      	ldr	r2, [pc, #328]	; (80034e0 <HAL_TIM_IC_Start_DMA+0x320>)
 8003396:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData,
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6a98      	ldr	r0, [r3, #40]	; 0x28
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	3338      	adds	r3, #56	; 0x38
 80033a2:	4619      	mov	r1, r3
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	887b      	ldrh	r3, [r7, #2]
 80033a8:	f7fe fc04 	bl	8001bb4 <HAL_DMA_Start_IT>
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d001      	beq.n	80033b6 <HAL_TIM_IC_Start_DMA+0x1f6>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033b2:	2301      	movs	r3, #1
 80033b4:	e08c      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80033c4:	60da      	str	r2, [r3, #12]
      break;
 80033c6:	e04a      	b.n	800345e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033cc:	4a42      	ldr	r2, [pc, #264]	; (80034d8 <HAL_TIM_IC_Start_DMA+0x318>)
 80033ce:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033d4:	4a41      	ldr	r2, [pc, #260]	; (80034dc <HAL_TIM_IC_Start_DMA+0x31c>)
 80033d6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033dc:	4a40      	ldr	r2, [pc, #256]	; (80034e0 <HAL_TIM_IC_Start_DMA+0x320>)
 80033de:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData,
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	333c      	adds	r3, #60	; 0x3c
 80033ea:	4619      	mov	r1, r3
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	887b      	ldrh	r3, [r7, #2]
 80033f0:	f7fe fbe0 	bl	8001bb4 <HAL_DMA_Start_IT>
 80033f4:	4603      	mov	r3, r0
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d001      	beq.n	80033fe <HAL_TIM_IC_Start_DMA+0x23e>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e068      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	68da      	ldr	r2, [r3, #12]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800340c:	60da      	str	r2, [r3, #12]
      break;
 800340e:	e026      	b.n	800345e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003414:	4a30      	ldr	r2, [pc, #192]	; (80034d8 <HAL_TIM_IC_Start_DMA+0x318>)
 8003416:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341c:	4a2f      	ldr	r2, [pc, #188]	; (80034dc <HAL_TIM_IC_Start_DMA+0x31c>)
 800341e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003424:	4a2e      	ldr	r2, [pc, #184]	; (80034e0 <HAL_TIM_IC_Start_DMA+0x320>)
 8003426:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData,
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3340      	adds	r3, #64	; 0x40
 8003432:	4619      	mov	r1, r3
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	887b      	ldrh	r3, [r7, #2]
 8003438:	f7fe fbbc 	bl	8001bb4 <HAL_DMA_Start_IT>
 800343c:	4603      	mov	r3, r0
 800343e:	2b00      	cmp	r3, #0
 8003440:	d001      	beq.n	8003446 <HAL_TIM_IC_Start_DMA+0x286>
                           Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e044      	b.n	80034d0 <HAL_TIM_IC_Start_DMA+0x310>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003454:	60da      	str	r2, [r3, #12]
      break;
 8003456:	e002      	b.n	800345e <HAL_TIM_IC_Start_DMA+0x29e>
    }

    default:
      status = HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	75fb      	strb	r3, [r7, #23]
      break;
 800345c:	bf00      	nop
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a20      	ldr	r2, [pc, #128]	; (80034e4 <HAL_TIM_IC_Start_DMA+0x324>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d018      	beq.n	800349a <HAL_TIM_IC_Start_DMA+0x2da>
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003470:	d013      	beq.n	800349a <HAL_TIM_IC_Start_DMA+0x2da>
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	4a1c      	ldr	r2, [pc, #112]	; (80034e8 <HAL_TIM_IC_Start_DMA+0x328>)
 8003478:	4293      	cmp	r3, r2
 800347a:	d00e      	beq.n	800349a <HAL_TIM_IC_Start_DMA+0x2da>
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	4a1a      	ldr	r2, [pc, #104]	; (80034ec <HAL_TIM_IC_Start_DMA+0x32c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d009      	beq.n	800349a <HAL_TIM_IC_Start_DMA+0x2da>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a19      	ldr	r2, [pc, #100]	; (80034f0 <HAL_TIM_IC_Start_DMA+0x330>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <HAL_TIM_IC_Start_DMA+0x2da>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4a17      	ldr	r2, [pc, #92]	; (80034f4 <HAL_TIM_IC_Start_DMA+0x334>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d111      	bne.n	80034be <HAL_TIM_IC_Start_DMA+0x2fe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 0307 	and.w	r3, r3, #7
 80034a4:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a6:	693b      	ldr	r3, [r7, #16]
 80034a8:	2b06      	cmp	r3, #6
 80034aa:	d010      	beq.n	80034ce <HAL_TIM_IC_Start_DMA+0x30e>
    {
      __HAL_TIM_ENABLE(htim);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f042 0201 	orr.w	r2, r2, #1
 80034ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034bc:	e007      	b.n	80034ce <HAL_TIM_IC_Start_DMA+0x30e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f042 0201 	orr.w	r2, r2, #1
 80034cc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80034ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3718      	adds	r7, #24
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	08003a11 	.word	0x08003a11
 80034dc:	08003ad9 	.word	0x08003ad9
 80034e0:	0800397f 	.word	0x0800397f
 80034e4:	40010000 	.word	0x40010000
 80034e8:	40000400 	.word	0x40000400
 80034ec:	40000800 	.word	0x40000800
 80034f0:	40000c00 	.word	0x40000c00
 80034f4:	40014000 	.word	0x40014000

080034f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b086      	sub	sp, #24
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800350e:	2b01      	cmp	r3, #1
 8003510:	d101      	bne.n	8003516 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003512:	2302      	movs	r3, #2
 8003514:	e088      	b.n	8003628 <HAL_TIM_IC_ConfigChannel+0x130>
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d11b      	bne.n	800355c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6818      	ldr	r0, [r3, #0]
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	6819      	ldr	r1, [r3, #0]
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	685a      	ldr	r2, [r3, #4]
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f000 fd10 	bl	8003f58 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	699a      	ldr	r2, [r3, #24]
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 020c 	bic.w	r2, r2, #12
 8003546:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	6999      	ldr	r1, [r3, #24]
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	689a      	ldr	r2, [r3, #8]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	430a      	orrs	r2, r1
 8003558:	619a      	str	r2, [r3, #24]
 800355a:	e060      	b.n	800361e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2b04      	cmp	r3, #4
 8003560:	d11c      	bne.n	800359c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	6818      	ldr	r0, [r3, #0]
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	6819      	ldr	r1, [r3, #0]
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	685a      	ldr	r2, [r3, #4]
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	68db      	ldr	r3, [r3, #12]
 8003572:	f000 fd88 	bl	8004086 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	699a      	ldr	r2, [r3, #24]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003584:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	6999      	ldr	r1, [r3, #24]
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	021a      	lsls	r2, r3, #8
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	430a      	orrs	r2, r1
 8003598:	619a      	str	r2, [r3, #24]
 800359a:	e040      	b.n	800361e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2b08      	cmp	r3, #8
 80035a0:	d11b      	bne.n	80035da <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6818      	ldr	r0, [r3, #0]
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	6819      	ldr	r1, [r3, #0]
 80035aa:	68bb      	ldr	r3, [r7, #8]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	68db      	ldr	r3, [r3, #12]
 80035b2:	f000 fdd5 	bl	8004160 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	69da      	ldr	r2, [r3, #28]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f022 020c 	bic.w	r2, r2, #12
 80035c4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	69d9      	ldr	r1, [r3, #28]
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	61da      	str	r2, [r3, #28]
 80035d8:	e021      	b.n	800361e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2b0c      	cmp	r3, #12
 80035de:	d11c      	bne.n	800361a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	6818      	ldr	r0, [r3, #0]
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	6819      	ldr	r1, [r3, #0]
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	685a      	ldr	r2, [r3, #4]
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	68db      	ldr	r3, [r3, #12]
 80035f0:	f000 fdf2 	bl	80041d8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69da      	ldr	r2, [r3, #28]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003602:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	69d9      	ldr	r1, [r3, #28]
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	021a      	lsls	r2, r3, #8
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	430a      	orrs	r2, r1
 8003616:	61da      	str	r2, [r3, #28]
 8003618:	e001      	b.n	800361e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003626:	7dfb      	ldrb	r3, [r7, #23]
}
 8003628:	4618      	mov	r0, r3
 800362a:	3718      	adds	r7, #24
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b086      	sub	sp, #24
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800363c:	2300      	movs	r3, #0
 800363e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800364a:	2302      	movs	r3, #2
 800364c:	e0ae      	b.n	80037ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2b0c      	cmp	r3, #12
 800365a:	f200 809f 	bhi.w	800379c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800365e:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003664:	08003699 	.word	0x08003699
 8003668:	0800379d 	.word	0x0800379d
 800366c:	0800379d 	.word	0x0800379d
 8003670:	0800379d 	.word	0x0800379d
 8003674:	080036d9 	.word	0x080036d9
 8003678:	0800379d 	.word	0x0800379d
 800367c:	0800379d 	.word	0x0800379d
 8003680:	0800379d 	.word	0x0800379d
 8003684:	0800371b 	.word	0x0800371b
 8003688:	0800379d 	.word	0x0800379d
 800368c:	0800379d 	.word	0x0800379d
 8003690:	0800379d 	.word	0x0800379d
 8003694:	0800375b 	.word	0x0800375b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 face 	bl	8003c40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f042 0208 	orr.w	r2, r2, #8
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 0204 	bic.w	r2, r2, #4
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	430a      	orrs	r2, r1
 80036d4:	619a      	str	r2, [r3, #24]
      break;
 80036d6:	e064      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68b9      	ldr	r1, [r7, #8]
 80036de:	4618      	mov	r0, r3
 80036e0:	f000 fb14 	bl	8003d0c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	699a      	ldr	r2, [r3, #24]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	6999      	ldr	r1, [r3, #24]
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	691b      	ldr	r3, [r3, #16]
 800370e:	021a      	lsls	r2, r3, #8
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	619a      	str	r2, [r3, #24]
      break;
 8003718:	e043      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fb5f 	bl	8003de4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f042 0208 	orr.w	r2, r2, #8
 8003734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0204 	bic.w	r2, r2, #4
 8003744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691a      	ldr	r2, [r3, #16]
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	430a      	orrs	r2, r1
 8003756:	61da      	str	r2, [r3, #28]
      break;
 8003758:	e023      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	68b9      	ldr	r1, [r7, #8]
 8003760:	4618      	mov	r0, r3
 8003762:	f000 fba9 	bl	8003eb8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	69da      	ldr	r2, [r3, #28]
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69d9      	ldr	r1, [r3, #28]
 800378c:	68bb      	ldr	r3, [r7, #8]
 800378e:	691b      	ldr	r3, [r3, #16]
 8003790:	021a      	lsls	r2, r3, #8
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	61da      	str	r2, [r3, #28]
      break;
 800379a:	e002      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	75fb      	strb	r3, [r7, #23]
      break;
 80037a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80037aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	3718      	adds	r7, #24
 80037b0:	46bd      	mov	sp, r7
 80037b2:	bd80      	pop	{r7, pc}

080037b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e0b4      	b.n	800393a <HAL_TIM_ConfigClockSource+0x186>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2202      	movs	r2, #2
 80037dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	68ba      	ldr	r2, [r7, #8]
 80037fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003808:	d03e      	beq.n	8003888 <HAL_TIM_ConfigClockSource+0xd4>
 800380a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800380e:	f200 8087 	bhi.w	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003812:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003816:	f000 8086 	beq.w	8003926 <HAL_TIM_ConfigClockSource+0x172>
 800381a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381e:	d87f      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003820:	2b70      	cmp	r3, #112	; 0x70
 8003822:	d01a      	beq.n	800385a <HAL_TIM_ConfigClockSource+0xa6>
 8003824:	2b70      	cmp	r3, #112	; 0x70
 8003826:	d87b      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003828:	2b60      	cmp	r3, #96	; 0x60
 800382a:	d050      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x11a>
 800382c:	2b60      	cmp	r3, #96	; 0x60
 800382e:	d877      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003830:	2b50      	cmp	r3, #80	; 0x50
 8003832:	d03c      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0xfa>
 8003834:	2b50      	cmp	r3, #80	; 0x50
 8003836:	d873      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003838:	2b40      	cmp	r3, #64	; 0x40
 800383a:	d058      	beq.n	80038ee <HAL_TIM_ConfigClockSource+0x13a>
 800383c:	2b40      	cmp	r3, #64	; 0x40
 800383e:	d86f      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003840:	2b30      	cmp	r3, #48	; 0x30
 8003842:	d064      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x15a>
 8003844:	2b30      	cmp	r3, #48	; 0x30
 8003846:	d86b      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003848:	2b20      	cmp	r3, #32
 800384a:	d060      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x15a>
 800384c:	2b20      	cmp	r3, #32
 800384e:	d867      	bhi.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
 8003850:	2b00      	cmp	r3, #0
 8003852:	d05c      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x15a>
 8003854:	2b10      	cmp	r3, #16
 8003856:	d05a      	beq.n	800390e <HAL_TIM_ConfigClockSource+0x15a>
 8003858:	e062      	b.n	8003920 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6899      	ldr	r1, [r3, #8]
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	68db      	ldr	r3, [r3, #12]
 800386a:	f000 fd0d 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800387c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	68ba      	ldr	r2, [r7, #8]
 8003884:	609a      	str	r2, [r3, #8]
      break;
 8003886:	e04f      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6818      	ldr	r0, [r3, #0]
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	6899      	ldr	r1, [r3, #8]
 8003890:	683b      	ldr	r3, [r7, #0]
 8003892:	685a      	ldr	r2, [r3, #4]
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f000 fcf6 	bl	8004288 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689a      	ldr	r2, [r3, #8]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038aa:	609a      	str	r2, [r3, #8]
      break;
 80038ac:	e03c      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 fbb4 	bl	8004028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2150      	movs	r1, #80	; 0x50
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 fcc3 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 80038cc:	e02c      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6818      	ldr	r0, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	6859      	ldr	r1, [r3, #4]
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
 80038da:	461a      	mov	r2, r3
 80038dc:	f000 fc10 	bl	8004100 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2160      	movs	r1, #96	; 0x60
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 fcb3 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 80038ec:	e01c      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6818      	ldr	r0, [r3, #0]
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	6859      	ldr	r1, [r3, #4]
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	68db      	ldr	r3, [r3, #12]
 80038fa:	461a      	mov	r2, r3
 80038fc:	f000 fb94 	bl	8004028 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	2140      	movs	r1, #64	; 0x40
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fca3 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 800390c:	e00c      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4619      	mov	r1, r3
 8003918:	4610      	mov	r0, r2
 800391a:	f000 fc9a 	bl	8004252 <TIM_ITRx_SetConfig>
      break;
 800391e:	e003      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	73fb      	strb	r3, [r7, #15]
      break;
 8003924:	e000      	b.n	8003928 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003926:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003938:	7bfb      	ldrb	r3, [r7, #15]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003942:	b480      	push	{r7}
 8003944:	b083      	sub	sp, #12
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr

08003956 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003956:	b480      	push	{r7}
 8003958:	b083      	sub	sp, #12
 800395a:	af00      	add	r7, sp, #0
 800395c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr

0800396a <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800396a:	b480      	push	{r7}
 800396c:	b083      	sub	sp, #12
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003972:	bf00      	nop
 8003974:	370c      	adds	r7, #12
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr

0800397e <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800397e:	b580      	push	{r7, lr}
 8003980:	b084      	sub	sp, #16
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800398a:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	429a      	cmp	r2, r3
 8003994:	d107      	bne.n	80039a6 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039a4:	e02a      	b.n	80039fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	d107      	bne.n	80039c0 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2202      	movs	r2, #2
 80039b4:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039be:	e01d      	b.n	80039fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d107      	bne.n	80039da <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	2204      	movs	r2, #4
 80039ce:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039d8:	e010      	b.n	80039fc <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	687a      	ldr	r2, [r7, #4]
 80039e0:	429a      	cmp	r2, r3
 80039e2:	d107      	bne.n	80039f4 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2208      	movs	r2, #8
 80039e8:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	2201      	movs	r2, #1
 80039ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80039f2:	e003      	b.n	80039fc <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ffb4 	bl	800396a <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2200      	movs	r2, #0
 8003a06:	771a      	strb	r2, [r3, #28]
}
 8003a08:	bf00      	nop
 8003a0a:	3710      	adds	r7, #16
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b084      	sub	sp, #16
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1c:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	429a      	cmp	r2, r3
 8003a26:	d10f      	bne.n	8003a48 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69db      	ldr	r3, [r3, #28]
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d146      	bne.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	2201      	movs	r2, #1
 8003a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a46:	e03d      	b.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	429a      	cmp	r2, r3
 8003a50:	d10f      	bne.n	8003a72 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	2202      	movs	r2, #2
 8003a56:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d131      	bne.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a70:	e028      	b.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d10f      	bne.n	8003a9c <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2204      	movs	r2, #4
 8003a80:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d11c      	bne.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9a:	e013      	b.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d10e      	bne.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2208      	movs	r2, #8
 8003aaa:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	69db      	ldr	r3, [r3, #28]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d107      	bne.n	8003ac4 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2201      	movs	r2, #1
 8003ac0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7ff ff3c 	bl	8003942 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2200      	movs	r2, #0
 8003ace:	771a      	strb	r2, [r3, #28]
}
 8003ad0:	bf00      	nop
 8003ad2:	3710      	adds	r7, #16
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ae4:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d103      	bne.n	8003af8 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2201      	movs	r2, #1
 8003af4:	771a      	strb	r2, [r3, #28]
 8003af6:	e019      	b.n	8003b2c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d103      	bne.n	8003b0a <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2202      	movs	r2, #2
 8003b06:	771a      	strb	r2, [r3, #28]
 8003b08:	e010      	b.n	8003b2c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d103      	bne.n	8003b1c <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2204      	movs	r2, #4
 8003b18:	771a      	strb	r2, [r3, #28]
 8003b1a:	e007      	b.n	8003b2c <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	429a      	cmp	r2, r3
 8003b24:	d102      	bne.n	8003b2c <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2208      	movs	r2, #8
 8003b2a:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 8003b2c:	68f8      	ldr	r0, [r7, #12]
 8003b2e:	f7ff ff12 	bl	8003956 <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
}
 8003b38:	bf00      	nop
 8003b3a:	3710      	adds	r7, #16
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b085      	sub	sp, #20
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a34      	ldr	r2, [pc, #208]	; (8003c24 <TIM_Base_SetConfig+0xe4>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d00f      	beq.n	8003b78 <TIM_Base_SetConfig+0x38>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b5e:	d00b      	beq.n	8003b78 <TIM_Base_SetConfig+0x38>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	4a31      	ldr	r2, [pc, #196]	; (8003c28 <TIM_Base_SetConfig+0xe8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d007      	beq.n	8003b78 <TIM_Base_SetConfig+0x38>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	4a30      	ldr	r2, [pc, #192]	; (8003c2c <TIM_Base_SetConfig+0xec>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d003      	beq.n	8003b78 <TIM_Base_SetConfig+0x38>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a2f      	ldr	r2, [pc, #188]	; (8003c30 <TIM_Base_SetConfig+0xf0>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d108      	bne.n	8003b8a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	68fa      	ldr	r2, [r7, #12]
 8003b86:	4313      	orrs	r3, r2
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <TIM_Base_SetConfig+0xe4>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01b      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b98:	d017      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	4a22      	ldr	r2, [pc, #136]	; (8003c28 <TIM_Base_SetConfig+0xe8>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d013      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	4a21      	ldr	r2, [pc, #132]	; (8003c2c <TIM_Base_SetConfig+0xec>)
 8003ba6:	4293      	cmp	r3, r2
 8003ba8:	d00f      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	4a20      	ldr	r2, [pc, #128]	; (8003c30 <TIM_Base_SetConfig+0xf0>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d00b      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	4a1f      	ldr	r2, [pc, #124]	; (8003c34 <TIM_Base_SetConfig+0xf4>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d007      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	4a1e      	ldr	r2, [pc, #120]	; (8003c38 <TIM_Base_SetConfig+0xf8>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d003      	beq.n	8003bca <TIM_Base_SetConfig+0x8a>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a1d      	ldr	r2, [pc, #116]	; (8003c3c <TIM_Base_SetConfig+0xfc>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d108      	bne.n	8003bdc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	68fa      	ldr	r2, [r7, #12]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	4313      	orrs	r3, r2
 8003be8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	68fa      	ldr	r2, [r7, #12]
 8003bee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	689a      	ldr	r2, [r3, #8]
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <TIM_Base_SetConfig+0xe4>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d103      	bne.n	8003c10 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	691a      	ldr	r2, [r3, #16]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	615a      	str	r2, [r3, #20]
}
 8003c16:	bf00      	nop
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	40010000 	.word	0x40010000
 8003c28:	40000400 	.word	0x40000400
 8003c2c:	40000800 	.word	0x40000800
 8003c30:	40000c00 	.word	0x40000c00
 8003c34:	40014000 	.word	0x40014000
 8003c38:	40014400 	.word	0x40014400
 8003c3c:	40014800 	.word	0x40014800

08003c40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b087      	sub	sp, #28
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6a1b      	ldr	r3, [r3, #32]
 8003c4e:	f023 0201 	bic.w	r2, r3, #1
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	699b      	ldr	r3, [r3, #24]
 8003c66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	f023 0303 	bic.w	r3, r3, #3
 8003c76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f023 0302 	bic.w	r3, r3, #2
 8003c88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	689b      	ldr	r3, [r3, #8]
 8003c8e:	697a      	ldr	r2, [r7, #20]
 8003c90:	4313      	orrs	r3, r2
 8003c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	4a1c      	ldr	r2, [pc, #112]	; (8003d08 <TIM_OC1_SetConfig+0xc8>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d10c      	bne.n	8003cb6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	f023 0308 	bic.w	r3, r3, #8
 8003ca2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	f023 0304 	bic.w	r3, r3, #4
 8003cb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	4a13      	ldr	r2, [pc, #76]	; (8003d08 <TIM_OC1_SetConfig+0xc8>)
 8003cba:	4293      	cmp	r3, r2
 8003cbc:	d111      	bne.n	8003ce2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cc4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ccc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	695b      	ldr	r3, [r3, #20]
 8003cd2:	693a      	ldr	r2, [r7, #16]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	693a      	ldr	r2, [r7, #16]
 8003cde:	4313      	orrs	r3, r2
 8003ce0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68fa      	ldr	r2, [r7, #12]
 8003cec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685a      	ldr	r2, [r3, #4]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	697a      	ldr	r2, [r7, #20]
 8003cfa:	621a      	str	r2, [r3, #32]
}
 8003cfc:	bf00      	nop
 8003cfe:	371c      	adds	r7, #28
 8003d00:	46bd      	mov	sp, r7
 8003d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d06:	4770      	bx	lr
 8003d08:	40010000 	.word	0x40010000

08003d0c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b087      	sub	sp, #28
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	f023 0210 	bic.w	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d42:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d44:	683b      	ldr	r3, [r7, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	021b      	lsls	r3, r3, #8
 8003d4a:	68fa      	ldr	r2, [r7, #12]
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	f023 0320 	bic.w	r3, r3, #32
 8003d56:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	697a      	ldr	r2, [r7, #20]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <TIM_OC2_SetConfig+0xd4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d10d      	bne.n	8003d88 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	011b      	lsls	r3, r3, #4
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d80:	697b      	ldr	r3, [r7, #20]
 8003d82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d86:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <TIM_OC2_SetConfig+0xd4>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d113      	bne.n	8003db8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	695b      	ldr	r3, [r3, #20]
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	693a      	ldr	r2, [r7, #16]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	699b      	ldr	r3, [r3, #24]
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	685a      	ldr	r2, [r3, #4]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ddc:	4770      	bx	lr
 8003dde:	bf00      	nop
 8003de0:	40010000 	.word	0x40010000

08003de4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
 8003dec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	f023 0303 	bic.w	r3, r3, #3
 8003e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68fa      	ldr	r2, [r7, #12]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003e26:	697b      	ldr	r3, [r7, #20]
 8003e28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	021b      	lsls	r3, r3, #8
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a1d      	ldr	r2, [pc, #116]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d10d      	bne.n	8003e5e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e48:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	68db      	ldr	r3, [r3, #12]
 8003e4e:	021b      	lsls	r3, r3, #8
 8003e50:	697a      	ldr	r2, [r7, #20]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e5c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <TIM_OC3_SetConfig+0xd0>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d113      	bne.n	8003e8e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	693a      	ldr	r2, [r7, #16]
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	011b      	lsls	r3, r3, #4
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	693a      	ldr	r2, [r7, #16]
 8003e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	68fa      	ldr	r2, [r7, #12]
 8003e98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	685a      	ldr	r2, [r3, #4]
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	697a      	ldr	r2, [r7, #20]
 8003ea6:	621a      	str	r2, [r3, #32]
}
 8003ea8:	bf00      	nop
 8003eaa:	371c      	adds	r7, #28
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr
 8003eb4:	40010000 	.word	0x40010000

08003eb8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b087      	sub	sp, #28
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
 8003ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6a1b      	ldr	r3, [r3, #32]
 8003ec6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	69db      	ldr	r3, [r3, #28]
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	021b      	lsls	r3, r3, #8
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f02:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	031b      	lsls	r3, r3, #12
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	4313      	orrs	r3, r2
 8003f0e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a10      	ldr	r2, [pc, #64]	; (8003f54 <TIM_OC4_SetConfig+0x9c>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003f1e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	40010000 	.word	0x40010000

08003f58 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b087      	sub	sp, #28
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	60f8      	str	r0, [r7, #12]
 8003f60:	60b9      	str	r1, [r7, #8]
 8003f62:	607a      	str	r2, [r7, #4]
 8003f64:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	f023 0201 	bic.w	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1b      	ldr	r3, [r3, #32]
 8003f7c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	4a24      	ldr	r2, [pc, #144]	; (8004014 <TIM_TI1_SetConfig+0xbc>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d013      	beq.n	8003fae <TIM_TI1_SetConfig+0x56>
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f8c:	d00f      	beq.n	8003fae <TIM_TI1_SetConfig+0x56>
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	4a21      	ldr	r2, [pc, #132]	; (8004018 <TIM_TI1_SetConfig+0xc0>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d00b      	beq.n	8003fae <TIM_TI1_SetConfig+0x56>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	4a20      	ldr	r2, [pc, #128]	; (800401c <TIM_TI1_SetConfig+0xc4>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d007      	beq.n	8003fae <TIM_TI1_SetConfig+0x56>
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	4a1f      	ldr	r2, [pc, #124]	; (8004020 <TIM_TI1_SetConfig+0xc8>)
 8003fa2:	4293      	cmp	r3, r2
 8003fa4:	d003      	beq.n	8003fae <TIM_TI1_SetConfig+0x56>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	4a1e      	ldr	r2, [pc, #120]	; (8004024 <TIM_TI1_SetConfig+0xcc>)
 8003faa:	4293      	cmp	r3, r2
 8003fac:	d101      	bne.n	8003fb2 <TIM_TI1_SetConfig+0x5a>
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e000      	b.n	8003fb4 <TIM_TI1_SetConfig+0x5c>
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d008      	beq.n	8003fca <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003fb8:	697b      	ldr	r3, [r7, #20]
 8003fba:	f023 0303 	bic.w	r3, r3, #3
 8003fbe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003fc0:	697a      	ldr	r2, [r7, #20]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	e003      	b.n	8003fd2 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003fca:	697b      	ldr	r3, [r7, #20]
 8003fcc:	f043 0301 	orr.w	r3, r3, #1
 8003fd0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003fd8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	011b      	lsls	r3, r3, #4
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	697a      	ldr	r2, [r7, #20]
 8003fe2:	4313      	orrs	r3, r2
 8003fe4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f023 030a 	bic.w	r3, r3, #10
 8003fec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	f003 030a 	and.w	r3, r3, #10
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
 8004012:	bf00      	nop
 8004014:	40010000 	.word	0x40010000
 8004018:	40000400 	.word	0x40000400
 800401c:	40000800 	.word	0x40000800
 8004020:	40000c00 	.word	0x40000c00
 8004024:	40014000 	.word	0x40014000

08004028 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004028:	b480      	push	{r7}
 800402a:	b087      	sub	sp, #28
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	6a1b      	ldr	r3, [r3, #32]
 8004038:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6a1b      	ldr	r3, [r3, #32]
 800403e:	f023 0201 	bic.w	r2, r3, #1
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	699b      	ldr	r3, [r3, #24]
 800404a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004052:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	693a      	ldr	r2, [r7, #16]
 800405a:	4313      	orrs	r3, r2
 800405c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	f023 030a 	bic.w	r3, r3, #10
 8004064:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004066:	697a      	ldr	r2, [r7, #20]
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	4313      	orrs	r3, r2
 800406c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	621a      	str	r2, [r3, #32]
}
 800407a:	bf00      	nop
 800407c:	371c      	adds	r7, #28
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr

08004086 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004086:	b480      	push	{r7}
 8004088:	b087      	sub	sp, #28
 800408a:	af00      	add	r7, sp, #0
 800408c:	60f8      	str	r0, [r7, #12]
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	607a      	str	r2, [r7, #4]
 8004092:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a1b      	ldr	r3, [r3, #32]
 8004098:	f023 0210 	bic.w	r2, r3, #16
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040b2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	021b      	lsls	r3, r3, #8
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040c4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	031b      	lsls	r3, r3, #12
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040d8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	011b      	lsls	r3, r3, #4
 80040de:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040e2:	693a      	ldr	r2, [r7, #16]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	621a      	str	r2, [r3, #32]
}
 80040f4:	bf00      	nop
 80040f6:	371c      	adds	r7, #28
 80040f8:	46bd      	mov	sp, r7
 80040fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040fe:	4770      	bx	lr

08004100 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004100:	b480      	push	{r7}
 8004102:	b087      	sub	sp, #28
 8004104:	af00      	add	r7, sp, #0
 8004106:	60f8      	str	r0, [r7, #12]
 8004108:	60b9      	str	r1, [r7, #8]
 800410a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	f023 0210 	bic.w	r2, r3, #16
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800412a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	031b      	lsls	r3, r3, #12
 8004130:	697a      	ldr	r2, [r7, #20]
 8004132:	4313      	orrs	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800413c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	693a      	ldr	r2, [r7, #16]
 8004144:	4313      	orrs	r3, r2
 8004146:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	697a      	ldr	r2, [r7, #20]
 800414c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	621a      	str	r2, [r3, #32]
}
 8004154:	bf00      	nop
 8004156:	371c      	adds	r7, #28
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004160:	b480      	push	{r7}
 8004162:	b087      	sub	sp, #28
 8004164:	af00      	add	r7, sp, #0
 8004166:	60f8      	str	r0, [r7, #12]
 8004168:	60b9      	str	r1, [r7, #8]
 800416a:	607a      	str	r2, [r7, #4]
 800416c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6a1b      	ldr	r3, [r3, #32]
 8004172:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6a1b      	ldr	r3, [r3, #32]
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 0303 	bic.w	r3, r3, #3
 800418c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800419c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	011b      	lsls	r3, r3, #4
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80041aa:	693b      	ldr	r3, [r7, #16]
 80041ac:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80041b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	021b      	lsls	r3, r3, #8
 80041b6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80041ba:	693a      	ldr	r2, [r7, #16]
 80041bc:	4313      	orrs	r3, r2
 80041be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	693a      	ldr	r2, [r7, #16]
 80041ca:	621a      	str	r2, [r3, #32]
}
 80041cc:	bf00      	nop
 80041ce:	371c      	adds	r7, #28
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80041d8:	b480      	push	{r7}
 80041da:	b087      	sub	sp, #28
 80041dc:	af00      	add	r7, sp, #0
 80041de:	60f8      	str	r0, [r7, #12]
 80041e0:	60b9      	str	r1, [r7, #8]
 80041e2:	607a      	str	r2, [r7, #4]
 80041e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	021b      	lsls	r3, r3, #8
 800420a:	697a      	ldr	r2, [r7, #20]
 800420c:	4313      	orrs	r3, r2
 800420e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004216:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	031b      	lsls	r3, r3, #12
 800421c:	b29b      	uxth	r3, r3
 800421e:	697a      	ldr	r2, [r7, #20]
 8004220:	4313      	orrs	r3, r2
 8004222:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800422a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800422c:	68bb      	ldr	r3, [r7, #8]
 800422e:	031b      	lsls	r3, r3, #12
 8004230:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	693a      	ldr	r2, [r7, #16]
 8004244:	621a      	str	r2, [r3, #32]
}
 8004246:	bf00      	nop
 8004248:	371c      	adds	r7, #28
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr

08004252 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004252:	b480      	push	{r7}
 8004254:	b085      	sub	sp, #20
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
 800425a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	689b      	ldr	r3, [r3, #8]
 8004260:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004268:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800426a:	683a      	ldr	r2, [r7, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	4313      	orrs	r3, r2
 8004270:	f043 0307 	orr.w	r3, r3, #7
 8004274:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	3714      	adds	r7, #20
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
 8004294:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	021a      	lsls	r2, r3, #8
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	431a      	orrs	r2, r3
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	697a      	ldr	r2, [r7, #20]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	697a      	ldr	r2, [r7, #20]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	371c      	adds	r7, #28
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	f003 031f 	and.w	r3, r3, #31
 80042da:	2201      	movs	r2, #1
 80042dc:	fa02 f303 	lsl.w	r3, r2, r3
 80042e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6a1a      	ldr	r2, [r3, #32]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	43db      	mvns	r3, r3
 80042ea:	401a      	ands	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1a      	ldr	r2, [r3, #32]
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f003 031f 	and.w	r3, r3, #31
 80042fa:	6879      	ldr	r1, [r7, #4]
 80042fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004300:	431a      	orrs	r2, r3
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	621a      	str	r2, [r3, #32]
}
 8004306:	bf00      	nop
 8004308:	371c      	adds	r7, #28
 800430a:	46bd      	mov	sp, r7
 800430c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004310:	4770      	bx	lr
	...

08004314 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004314:	b480      	push	{r7}
 8004316:	b085      	sub	sp, #20
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]
 800431c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004324:	2b01      	cmp	r3, #1
 8004326:	d101      	bne.n	800432c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004328:	2302      	movs	r3, #2
 800432a:	e050      	b.n	80043ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	68fa      	ldr	r2, [r7, #12]
 8004364:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a1c      	ldr	r2, [pc, #112]	; (80043dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d018      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004378:	d013      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d00e      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d009      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a15      	ldr	r2, [pc, #84]	; (80043e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d004      	beq.n	80043a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4a13      	ldr	r2, [pc, #76]	; (80043ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d10c      	bne.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	68ba      	ldr	r2, [r7, #8]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	68ba      	ldr	r2, [r7, #8]
 80043ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2201      	movs	r2, #1
 80043c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2200      	movs	r2, #0
 80043c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80043cc:	2300      	movs	r3, #0
}
 80043ce:	4618      	mov	r0, r3
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	40010000 	.word	0x40010000
 80043e0:	40000400 	.word	0x40000400
 80043e4:	40000800 	.word	0x40000800
 80043e8:	40000c00 	.word	0x40000c00
 80043ec:	40014000 	.word	0x40014000

080043f0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004404:	2b01      	cmp	r3, #1
 8004406:	d101      	bne.n	800440c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004408:	2302      	movs	r3, #2
 800440a:	e03d      	b.n	8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	68db      	ldr	r3, [r3, #12]
 800441e:	4313      	orrs	r3, r2
 8004420:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	4313      	orrs	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	4313      	orrs	r3, r2
 800443c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4313      	orrs	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	691b      	ldr	r3, [r3, #16]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	4313      	orrs	r3, r2
 8004466:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2200      	movs	r2, #0
 8004482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004486:	2300      	movs	r3, #0
}
 8004488:	4618      	mov	r0, r3
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d101      	bne.n	80044a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	e03f      	b.n	8004526 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ac:	b2db      	uxtb	r3, r3
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d106      	bne.n	80044c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2200      	movs	r2, #0
 80044b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f7fd f890 	bl	80015e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68da      	ldr	r2, [r3, #12]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80044d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f829 	bl	8004530 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	695a      	ldr	r2, [r3, #20]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	68da      	ldr	r2, [r3, #12]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800450c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2200      	movs	r2, #0
 8004512:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2220      	movs	r2, #32
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2220      	movs	r2, #32
 8004520:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3708      	adds	r7, #8
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
	...

08004530 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004530:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004534:	b0c0      	sub	sp, #256	; 0x100
 8004536:	af00      	add	r7, sp, #0
 8004538:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800453c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800454c:	68d9      	ldr	r1, [r3, #12]
 800454e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	ea40 0301 	orr.w	r3, r0, r1
 8004558:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800455a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800455e:	689a      	ldr	r2, [r3, #8]
 8004560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	431a      	orrs	r2, r3
 8004568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	431a      	orrs	r2, r3
 8004570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004574:	69db      	ldr	r3, [r3, #28]
 8004576:	4313      	orrs	r3, r2
 8004578:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800457c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004588:	f021 010c 	bic.w	r1, r1, #12
 800458c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004590:	681a      	ldr	r2, [r3, #0]
 8004592:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004596:	430b      	orrs	r3, r1
 8004598:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800459a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80045a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045aa:	6999      	ldr	r1, [r3, #24]
 80045ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	ea40 0301 	orr.w	r3, r0, r1
 80045b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045bc:	681a      	ldr	r2, [r3, #0]
 80045be:	4b8f      	ldr	r3, [pc, #572]	; (80047fc <UART_SetConfig+0x2cc>)
 80045c0:	429a      	cmp	r2, r3
 80045c2:	d005      	beq.n	80045d0 <UART_SetConfig+0xa0>
 80045c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045c8:	681a      	ldr	r2, [r3, #0]
 80045ca:	4b8d      	ldr	r3, [pc, #564]	; (8004800 <UART_SetConfig+0x2d0>)
 80045cc:	429a      	cmp	r2, r3
 80045ce:	d104      	bne.n	80045da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80045d0:	f7fe fbd4 	bl	8002d7c <HAL_RCC_GetPCLK2Freq>
 80045d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80045d8:	e003      	b.n	80045e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80045da:	f7fe fbbb 	bl	8002d54 <HAL_RCC_GetPCLK1Freq>
 80045de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045e6:	69db      	ldr	r3, [r3, #28]
 80045e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045ec:	f040 810c 	bne.w	8004808 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80045fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80045fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004602:	4622      	mov	r2, r4
 8004604:	462b      	mov	r3, r5
 8004606:	1891      	adds	r1, r2, r2
 8004608:	65b9      	str	r1, [r7, #88]	; 0x58
 800460a:	415b      	adcs	r3, r3
 800460c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800460e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004612:	4621      	mov	r1, r4
 8004614:	eb12 0801 	adds.w	r8, r2, r1
 8004618:	4629      	mov	r1, r5
 800461a:	eb43 0901 	adc.w	r9, r3, r1
 800461e:	f04f 0200 	mov.w	r2, #0
 8004622:	f04f 0300 	mov.w	r3, #0
 8004626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800462a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800462e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004632:	4690      	mov	r8, r2
 8004634:	4699      	mov	r9, r3
 8004636:	4623      	mov	r3, r4
 8004638:	eb18 0303 	adds.w	r3, r8, r3
 800463c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004640:	462b      	mov	r3, r5
 8004642:	eb49 0303 	adc.w	r3, r9, r3
 8004646:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800464a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004656:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800465a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800465e:	460b      	mov	r3, r1
 8004660:	18db      	adds	r3, r3, r3
 8004662:	653b      	str	r3, [r7, #80]	; 0x50
 8004664:	4613      	mov	r3, r2
 8004666:	eb42 0303 	adc.w	r3, r2, r3
 800466a:	657b      	str	r3, [r7, #84]	; 0x54
 800466c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004670:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004674:	f7fc f9ce 	bl	8000a14 <__aeabi_uldivmod>
 8004678:	4602      	mov	r2, r0
 800467a:	460b      	mov	r3, r1
 800467c:	4b61      	ldr	r3, [pc, #388]	; (8004804 <UART_SetConfig+0x2d4>)
 800467e:	fba3 2302 	umull	r2, r3, r3, r2
 8004682:	095b      	lsrs	r3, r3, #5
 8004684:	011c      	lsls	r4, r3, #4
 8004686:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800468a:	2200      	movs	r2, #0
 800468c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004690:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004694:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004698:	4642      	mov	r2, r8
 800469a:	464b      	mov	r3, r9
 800469c:	1891      	adds	r1, r2, r2
 800469e:	64b9      	str	r1, [r7, #72]	; 0x48
 80046a0:	415b      	adcs	r3, r3
 80046a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80046a8:	4641      	mov	r1, r8
 80046aa:	eb12 0a01 	adds.w	sl, r2, r1
 80046ae:	4649      	mov	r1, r9
 80046b0:	eb43 0b01 	adc.w	fp, r3, r1
 80046b4:	f04f 0200 	mov.w	r2, #0
 80046b8:	f04f 0300 	mov.w	r3, #0
 80046bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80046c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80046c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80046c8:	4692      	mov	sl, r2
 80046ca:	469b      	mov	fp, r3
 80046cc:	4643      	mov	r3, r8
 80046ce:	eb1a 0303 	adds.w	r3, sl, r3
 80046d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80046d6:	464b      	mov	r3, r9
 80046d8:	eb4b 0303 	adc.w	r3, fp, r3
 80046dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80046f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80046f4:	460b      	mov	r3, r1
 80046f6:	18db      	adds	r3, r3, r3
 80046f8:	643b      	str	r3, [r7, #64]	; 0x40
 80046fa:	4613      	mov	r3, r2
 80046fc:	eb42 0303 	adc.w	r3, r2, r3
 8004700:	647b      	str	r3, [r7, #68]	; 0x44
 8004702:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004706:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800470a:	f7fc f983 	bl	8000a14 <__aeabi_uldivmod>
 800470e:	4602      	mov	r2, r0
 8004710:	460b      	mov	r3, r1
 8004712:	4611      	mov	r1, r2
 8004714:	4b3b      	ldr	r3, [pc, #236]	; (8004804 <UART_SetConfig+0x2d4>)
 8004716:	fba3 2301 	umull	r2, r3, r3, r1
 800471a:	095b      	lsrs	r3, r3, #5
 800471c:	2264      	movs	r2, #100	; 0x64
 800471e:	fb02 f303 	mul.w	r3, r2, r3
 8004722:	1acb      	subs	r3, r1, r3
 8004724:	00db      	lsls	r3, r3, #3
 8004726:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800472a:	4b36      	ldr	r3, [pc, #216]	; (8004804 <UART_SetConfig+0x2d4>)
 800472c:	fba3 2302 	umull	r2, r3, r3, r2
 8004730:	095b      	lsrs	r3, r3, #5
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004738:	441c      	add	r4, r3
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004744:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004748:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800474c:	4642      	mov	r2, r8
 800474e:	464b      	mov	r3, r9
 8004750:	1891      	adds	r1, r2, r2
 8004752:	63b9      	str	r1, [r7, #56]	; 0x38
 8004754:	415b      	adcs	r3, r3
 8004756:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004758:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800475c:	4641      	mov	r1, r8
 800475e:	1851      	adds	r1, r2, r1
 8004760:	6339      	str	r1, [r7, #48]	; 0x30
 8004762:	4649      	mov	r1, r9
 8004764:	414b      	adcs	r3, r1
 8004766:	637b      	str	r3, [r7, #52]	; 0x34
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004774:	4659      	mov	r1, fp
 8004776:	00cb      	lsls	r3, r1, #3
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477e:	4651      	mov	r1, sl
 8004780:	00ca      	lsls	r2, r1, #3
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	4603      	mov	r3, r0
 8004788:	4642      	mov	r2, r8
 800478a:	189b      	adds	r3, r3, r2
 800478c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004790:	464b      	mov	r3, r9
 8004792:	460a      	mov	r2, r1
 8004794:	eb42 0303 	adc.w	r3, r2, r3
 8004798:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800479c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80047a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80047ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80047b0:	460b      	mov	r3, r1
 80047b2:	18db      	adds	r3, r3, r3
 80047b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80047b6:	4613      	mov	r3, r2
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80047c6:	f7fc f925 	bl	8000a14 <__aeabi_uldivmod>
 80047ca:	4602      	mov	r2, r0
 80047cc:	460b      	mov	r3, r1
 80047ce:	4b0d      	ldr	r3, [pc, #52]	; (8004804 <UART_SetConfig+0x2d4>)
 80047d0:	fba3 1302 	umull	r1, r3, r3, r2
 80047d4:	095b      	lsrs	r3, r3, #5
 80047d6:	2164      	movs	r1, #100	; 0x64
 80047d8:	fb01 f303 	mul.w	r3, r1, r3
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	00db      	lsls	r3, r3, #3
 80047e0:	3332      	adds	r3, #50	; 0x32
 80047e2:	4a08      	ldr	r2, [pc, #32]	; (8004804 <UART_SetConfig+0x2d4>)
 80047e4:	fba2 2303 	umull	r2, r3, r2, r3
 80047e8:	095b      	lsrs	r3, r3, #5
 80047ea:	f003 0207 	and.w	r2, r3, #7
 80047ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4422      	add	r2, r4
 80047f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80047f8:	e105      	b.n	8004a06 <UART_SetConfig+0x4d6>
 80047fa:	bf00      	nop
 80047fc:	40011000 	.word	0x40011000
 8004800:	40011400 	.word	0x40011400
 8004804:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004808:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800480c:	2200      	movs	r2, #0
 800480e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004812:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004816:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800481a:	4642      	mov	r2, r8
 800481c:	464b      	mov	r3, r9
 800481e:	1891      	adds	r1, r2, r2
 8004820:	6239      	str	r1, [r7, #32]
 8004822:	415b      	adcs	r3, r3
 8004824:	627b      	str	r3, [r7, #36]	; 0x24
 8004826:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800482a:	4641      	mov	r1, r8
 800482c:	1854      	adds	r4, r2, r1
 800482e:	4649      	mov	r1, r9
 8004830:	eb43 0501 	adc.w	r5, r3, r1
 8004834:	f04f 0200 	mov.w	r2, #0
 8004838:	f04f 0300 	mov.w	r3, #0
 800483c:	00eb      	lsls	r3, r5, #3
 800483e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004842:	00e2      	lsls	r2, r4, #3
 8004844:	4614      	mov	r4, r2
 8004846:	461d      	mov	r5, r3
 8004848:	4643      	mov	r3, r8
 800484a:	18e3      	adds	r3, r4, r3
 800484c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004850:	464b      	mov	r3, r9
 8004852:	eb45 0303 	adc.w	r3, r5, r3
 8004856:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004866:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004876:	4629      	mov	r1, r5
 8004878:	008b      	lsls	r3, r1, #2
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004880:	4621      	mov	r1, r4
 8004882:	008a      	lsls	r2, r1, #2
 8004884:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004888:	f7fc f8c4 	bl	8000a14 <__aeabi_uldivmod>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4b60      	ldr	r3, [pc, #384]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004892:	fba3 2302 	umull	r2, r3, r3, r2
 8004896:	095b      	lsrs	r3, r3, #5
 8004898:	011c      	lsls	r4, r3, #4
 800489a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800489e:	2200      	movs	r2, #0
 80048a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80048a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80048a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80048ac:	4642      	mov	r2, r8
 80048ae:	464b      	mov	r3, r9
 80048b0:	1891      	adds	r1, r2, r2
 80048b2:	61b9      	str	r1, [r7, #24]
 80048b4:	415b      	adcs	r3, r3
 80048b6:	61fb      	str	r3, [r7, #28]
 80048b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80048bc:	4641      	mov	r1, r8
 80048be:	1851      	adds	r1, r2, r1
 80048c0:	6139      	str	r1, [r7, #16]
 80048c2:	4649      	mov	r1, r9
 80048c4:	414b      	adcs	r3, r1
 80048c6:	617b      	str	r3, [r7, #20]
 80048c8:	f04f 0200 	mov.w	r2, #0
 80048cc:	f04f 0300 	mov.w	r3, #0
 80048d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80048d4:	4659      	mov	r1, fp
 80048d6:	00cb      	lsls	r3, r1, #3
 80048d8:	4651      	mov	r1, sl
 80048da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80048de:	4651      	mov	r1, sl
 80048e0:	00ca      	lsls	r2, r1, #3
 80048e2:	4610      	mov	r0, r2
 80048e4:	4619      	mov	r1, r3
 80048e6:	4603      	mov	r3, r0
 80048e8:	4642      	mov	r2, r8
 80048ea:	189b      	adds	r3, r3, r2
 80048ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80048f0:	464b      	mov	r3, r9
 80048f2:	460a      	mov	r2, r1
 80048f4:	eb42 0303 	adc.w	r3, r2, r3
 80048f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80048fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	2200      	movs	r2, #0
 8004904:	67bb      	str	r3, [r7, #120]	; 0x78
 8004906:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004914:	4649      	mov	r1, r9
 8004916:	008b      	lsls	r3, r1, #2
 8004918:	4641      	mov	r1, r8
 800491a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800491e:	4641      	mov	r1, r8
 8004920:	008a      	lsls	r2, r1, #2
 8004922:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004926:	f7fc f875 	bl	8000a14 <__aeabi_uldivmod>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004930:	fba3 1302 	umull	r1, r3, r3, r2
 8004934:	095b      	lsrs	r3, r3, #5
 8004936:	2164      	movs	r1, #100	; 0x64
 8004938:	fb01 f303 	mul.w	r3, r1, r3
 800493c:	1ad3      	subs	r3, r2, r3
 800493e:	011b      	lsls	r3, r3, #4
 8004940:	3332      	adds	r3, #50	; 0x32
 8004942:	4a34      	ldr	r2, [pc, #208]	; (8004a14 <UART_SetConfig+0x4e4>)
 8004944:	fba2 2303 	umull	r2, r3, r2, r3
 8004948:	095b      	lsrs	r3, r3, #5
 800494a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800494e:	441c      	add	r4, r3
 8004950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004954:	2200      	movs	r2, #0
 8004956:	673b      	str	r3, [r7, #112]	; 0x70
 8004958:	677a      	str	r2, [r7, #116]	; 0x74
 800495a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800495e:	4642      	mov	r2, r8
 8004960:	464b      	mov	r3, r9
 8004962:	1891      	adds	r1, r2, r2
 8004964:	60b9      	str	r1, [r7, #8]
 8004966:	415b      	adcs	r3, r3
 8004968:	60fb      	str	r3, [r7, #12]
 800496a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800496e:	4641      	mov	r1, r8
 8004970:	1851      	adds	r1, r2, r1
 8004972:	6039      	str	r1, [r7, #0]
 8004974:	4649      	mov	r1, r9
 8004976:	414b      	adcs	r3, r1
 8004978:	607b      	str	r3, [r7, #4]
 800497a:	f04f 0200 	mov.w	r2, #0
 800497e:	f04f 0300 	mov.w	r3, #0
 8004982:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004986:	4659      	mov	r1, fp
 8004988:	00cb      	lsls	r3, r1, #3
 800498a:	4651      	mov	r1, sl
 800498c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004990:	4651      	mov	r1, sl
 8004992:	00ca      	lsls	r2, r1, #3
 8004994:	4610      	mov	r0, r2
 8004996:	4619      	mov	r1, r3
 8004998:	4603      	mov	r3, r0
 800499a:	4642      	mov	r2, r8
 800499c:	189b      	adds	r3, r3, r2
 800499e:	66bb      	str	r3, [r7, #104]	; 0x68
 80049a0:	464b      	mov	r3, r9
 80049a2:	460a      	mov	r2, r1
 80049a4:	eb42 0303 	adc.w	r3, r2, r3
 80049a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80049aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	2200      	movs	r2, #0
 80049b2:	663b      	str	r3, [r7, #96]	; 0x60
 80049b4:	667a      	str	r2, [r7, #100]	; 0x64
 80049b6:	f04f 0200 	mov.w	r2, #0
 80049ba:	f04f 0300 	mov.w	r3, #0
 80049be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80049c2:	4649      	mov	r1, r9
 80049c4:	008b      	lsls	r3, r1, #2
 80049c6:	4641      	mov	r1, r8
 80049c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049cc:	4641      	mov	r1, r8
 80049ce:	008a      	lsls	r2, r1, #2
 80049d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80049d4:	f7fc f81e 	bl	8000a14 <__aeabi_uldivmod>
 80049d8:	4602      	mov	r2, r0
 80049da:	460b      	mov	r3, r1
 80049dc:	4b0d      	ldr	r3, [pc, #52]	; (8004a14 <UART_SetConfig+0x4e4>)
 80049de:	fba3 1302 	umull	r1, r3, r3, r2
 80049e2:	095b      	lsrs	r3, r3, #5
 80049e4:	2164      	movs	r1, #100	; 0x64
 80049e6:	fb01 f303 	mul.w	r3, r1, r3
 80049ea:	1ad3      	subs	r3, r2, r3
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	3332      	adds	r3, #50	; 0x32
 80049f0:	4a08      	ldr	r2, [pc, #32]	; (8004a14 <UART_SetConfig+0x4e4>)
 80049f2:	fba2 2303 	umull	r2, r3, r2, r3
 80049f6:	095b      	lsrs	r3, r3, #5
 80049f8:	f003 020f 	and.w	r2, r3, #15
 80049fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4422      	add	r2, r4
 8004a04:	609a      	str	r2, [r3, #8]
}
 8004a06:	bf00      	nop
 8004a08:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004a12:	bf00      	nop
 8004a14:	51eb851f 	.word	0x51eb851f

08004a18 <__libc_init_array>:
 8004a18:	b570      	push	{r4, r5, r6, lr}
 8004a1a:	4d0d      	ldr	r5, [pc, #52]	; (8004a50 <__libc_init_array+0x38>)
 8004a1c:	4c0d      	ldr	r4, [pc, #52]	; (8004a54 <__libc_init_array+0x3c>)
 8004a1e:	1b64      	subs	r4, r4, r5
 8004a20:	10a4      	asrs	r4, r4, #2
 8004a22:	2600      	movs	r6, #0
 8004a24:	42a6      	cmp	r6, r4
 8004a26:	d109      	bne.n	8004a3c <__libc_init_array+0x24>
 8004a28:	4d0b      	ldr	r5, [pc, #44]	; (8004a58 <__libc_init_array+0x40>)
 8004a2a:	4c0c      	ldr	r4, [pc, #48]	; (8004a5c <__libc_init_array+0x44>)
 8004a2c:	f000 f820 	bl	8004a70 <_init>
 8004a30:	1b64      	subs	r4, r4, r5
 8004a32:	10a4      	asrs	r4, r4, #2
 8004a34:	2600      	movs	r6, #0
 8004a36:	42a6      	cmp	r6, r4
 8004a38:	d105      	bne.n	8004a46 <__libc_init_array+0x2e>
 8004a3a:	bd70      	pop	{r4, r5, r6, pc}
 8004a3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a40:	4798      	blx	r3
 8004a42:	3601      	adds	r6, #1
 8004a44:	e7ee      	b.n	8004a24 <__libc_init_array+0xc>
 8004a46:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a4a:	4798      	blx	r3
 8004a4c:	3601      	adds	r6, #1
 8004a4e:	e7f2      	b.n	8004a36 <__libc_init_array+0x1e>
 8004a50:	08004ab0 	.word	0x08004ab0
 8004a54:	08004ab0 	.word	0x08004ab0
 8004a58:	08004ab0 	.word	0x08004ab0
 8004a5c:	08004ab4 	.word	0x08004ab4

08004a60 <memset>:
 8004a60:	4402      	add	r2, r0
 8004a62:	4603      	mov	r3, r0
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d100      	bne.n	8004a6a <memset+0xa>
 8004a68:	4770      	bx	lr
 8004a6a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a6e:	e7f9      	b.n	8004a64 <memset+0x4>

08004a70 <_init>:
 8004a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a72:	bf00      	nop
 8004a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a76:	bc08      	pop	{r3}
 8004a78:	469e      	mov	lr, r3
 8004a7a:	4770      	bx	lr

08004a7c <_fini>:
 8004a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a7e:	bf00      	nop
 8004a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a82:	bc08      	pop	{r3}
 8004a84:	469e      	mov	lr, r3
 8004a86:	4770      	bx	lr
